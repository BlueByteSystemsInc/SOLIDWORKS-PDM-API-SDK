{
  "api/BlueByte.SOLIDWORKS.PDMProfessional.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.html",
    "title": "BlueByte.SOLIDWORKS.PDMProfessional | SOLIDWORKS PDM SDK",
    "summary": "BlueByte.SOLIDWORKS.PDMProfessional This documentation covers the BlueByte.SOLIDWORKS.PDMProfessional API. Note: This API shares its name with the .Extensions NuGet package, which provides additional functionality and extensions for this library. NuGet Package Installation To install the main package, run: dotnet add package BlueByte.SOLIDWORKS.PDMProfessional To install the extensions package, run: dotnet add package BlueByte.SOLIDWORKS.PDMProfessional.Extensions"
  },
  "api/BlueByte.SOLIDWORKS.html": {
    "href": "api/BlueByte.SOLIDWORKS.html",
    "title": "BlueByte.SOLIDWORKS Namespace | SOLIDWORKS PDM SDK",
    "summary": "BlueByte.SOLIDWORKS Namespace This namespace contains types related to SOLIDWORKS."
  },
  "api/BlueByte.html": {
    "href": "api/BlueByte.html",
    "title": "BlueByte Namespace | SOLIDWORKS PDM SDK",
    "summary": "BlueByte Namespace The BlueByte namespace contains core classes and utilities for Blue Byte Systems Inc. projects. It provides foundational components used throughout the SDK."
  },
  "docs/TaskDetails.html": {
    "href": "docs/TaskDetails.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "summary": "Definition The task details hook gets triggered when you right-click on the task in the tasklist and click Details... IEdmTaskInstance object You may need, depending on your OnCmd implementation, to access the task instance. In PDMSDK, use base.Instance to get access to the IEdmTaskInstance object. Creating an EdmTaskPage Tip If your task does not have any data to show after the completion of the task such as logs, you can completely ignore the EdmTaskDetails hook. Consult the Task Sample from the SOLIDWORKS PDM Professional API help to see the default implementation of this hook. We highly recommend you use PDMSDK's because it saves a lot of time. You can add one of many custom tabs. In PDMSDK terminology, we call them task page. A task page is presented by the type EdmTaskPage. You need to be aware of two types: EdmTaskPage: It is a generic wrapper around the WinForms UserControl with built-in support for saving and loading data in the task. The data is serialized and deserialized. The data object must be a serialized class. the EdmTaskPage takes care of creating or loading an instance of your data class as well as saving into the task. Your data object is property called ViewModel in the EdmTaskPage. ITaskPage: An interface that the EdmTaskPage implements. Tip We highly recommend you use the PDMSDK Visual Studio Template because it comes ready with a boilerplate EdmTaskPage item to be added to your project. To add an EdmTaskdetails: Right-click on the Project in the Solution Explorer and click Add New Item... Look for EdmTaskPage, give it a new and click Add. By default, two items are added: The EdmTaskPage and the data object which is called EdmTaskPageViewModel. In the example below, the page is called Messaging. An EdmTaskPage is a WinForms UserControl. You can use the Visual Studio Toolbox to add and remove WinForms controls to and from it. Requirement: In the OnDataLoaded method in the EdmTaskPage, you can bind your the data object properties to the controls in the EdmTaskPage. Adding a new task page In the OnCmd implementation: Create instances of your task pages. Set the Container property in the EdmTaskPage to that of the AddInBase. We're passing the Container from the AddInBase to the EdmTaskPage. Set the Name property of the EdmTaskPage. You can also do this in the constructor. Call the method AddTaskDetailsPage and supply it with your page. Note We do not support adding multipages to the details window. Example C Sharp VB Pages.Messaging taskdetailsMessagingTab = default(Pages.Messaging); public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch (poCmd.meCmdType) { case EdmCmdType.EdmCmd_TaskDetails: { taskdetailsMessagingTab = new Pages.Messaging(); taskdetailsMessagingTab.Container = base.Container; taskdetailsMessagingTab.Name = \"Messaging\"; AddTaskDetailsPage(taskdetailsMessagingTab); } break; case EdmCmdType.EdmCmd_TaskDetails: break; case EdmCmdType.EdmCmd_TaskRun: break; case EdmCmdType.EdmCmd_TaskLaunch: break; case EdmCmdType.EdmCmd_TaskLaunchButton: default: break; } } catch (CancellationException e) { throw; } catch (TaskFailedException e) { throw; } // this is a PDM exception catch (COMException e) { throw; } catch (Exception e) { throw; } } Private taskdetailsMessagingTab As Pages.Messaging = Nothing Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_Taskdetails taskdetailsMessagingTab = New Pages.Messaging() taskdetailsMessagingTab.Container = MyBase.Container taskdetailsMessagingTab.Name = \"Messaging\" AddTaskdetailsPage(taskdetailsMessagingTab) Case EdmCmdType.EdmCmd_TaskRun ' Implement task run logic here Case EdmCmdType.EdmCmd_TaskLaunch ' Implement task launch logic here Case EdmCmdType.EdmCmd_TaskLaunchButton ' Implement task launch button logic here Case Else ' Default case logic End Select Catch e As CancellationException Throw Catch e As TaskFailedException Throw ' This is a PDM exception Catch e As COMException Throw Catch e As Exception Throw End Try End Sub Debugging Important You cannot debug task details pages with Debug Add-ins... Make sure you have a fresh connection to PDM. Generally speaking, this is done by killing Conisioadmin.exe, edmserver.exe and explorer.exe and then restarting explorer.exe. This process can be done from the Windows task manager. Call AttachDebugger in your OnCmd. Compile code. Add the project files to your vault from the administration tool. Right-click on Add-ins and click New Add-in... Accept all dialogs. Right-click on Tasks and click New... Choose the add-in that you just added from the dropdown. AttachDebugger will be called immediately and you can attach Visual Studio to start debugging through your code. Tip You can use the directives #if DEBUG #endif to conditionally compile the AttachDebugger in the debug configuration. This will ignore it in the Release configuration which you can use in production. Be aware that release configurations do not automatically generate pdb files so your stack traces will not print in your error or logs."
  },
  "docs/TaskLaunch.html": {
    "href": "docs/TaskLaunch.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "summary": "Definition The task launch hook gets triggered when your task by launched. A task can be launched by one computer and executed (ran) on another one. It is very common for the executing computer to be the PDM server. Almost all of your task implementation in the OnCmd method will be handled by the TaskRun hook. Note Use TaskLaunch to show any necessary UI to get the user input. IEdmTaskInstance object You may need, depending on your OnCmd implementation, to access the task instance. In PDMSDK, use Instance to get access to the IEdmTaskInstance object. This property returns a value in TaskLaunch, launch and, Details. Cancellation and suspension You cannot suspend a task during its launch. You are able to cancel the task by means setting the mpoCancel field on the EdmCmd parameter just like you would do with any hook. Transfering data from task launch to task run Important It is critical to understand that your add-in will invoked by two different processes one during TaskLaunch and one during TaskRun. Every process will have its own ID. When a task a launched, it is launched with TaskLauncher.exe and when it is run, it runs in the TaskExecuter.exe process. You can find out more about these processes by using the AttachDebugger method. This leaves data transfer from TaskLaunch to TaskRun only possible via the GetVarEx and SetVarEx methods part of the IEdmTaskInstance interface. Getting saved data To get access to the data you have saved in the task setup, call the method GetSettings where T is the view model type. Example: C Sharp VB var messagingViewModel = base.GetSettings<MessagingViewModel>(); Dim messagingViewModel As MessagingViewModel = MyBase.GetSettings(Of MessagingViewModel)()"
  },
  "docs/TaskRun.html": {
    "href": "docs/TaskRun.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "summary": "Definition The task run hook gets triggered when your task gets transfered from the launch machine to the run. A task can be launched by one computer and executed (ran) on another one. It is very common for the executing computer to be the PDM server. Almost all of your task implementation in the OnCmd method will be handled by the TaskRun hook. IEdmTaskInstance object You may need, depending on your OnCmd implementation, to access the task instance. In PDMSDK, use Instance to get access to the IEdmTaskInstance object. This property returns a value in TaskLaunch, Run and, Details. Updating the progressbar To update the progress bar in the tasklist use these two methods. SetRange UpdateTaskMessage Warning UpdateTaskMessage will throw an exception if the provided position is out of bounds of the specified range. Cancellation and suspension Whenever you want to give your implementation a chance to consider if the user has requested a suspension or a cancellation call UpdateTaskMessage. Warning In case of a cancellation, UpdateTaskMessage will throw a CancellationException that you need to handle. Note UpdateTaskMessage handles cancellation, suspension and update the progressbar and the message in the tasklist. Getting saved data To get access to the data you have saved in the task setup, call the method GetSettings where T is the view model type. Example: C Sharp VB var messagingViewModel = base.GetSettings<MessagingViewModel>(); Dim messagingViewModel As MessagingViewModel = MyBase.GetSettings(Of MessagingViewModel)()"
  },
  "docs/TaskSetup.html": {
    "href": "docs/TaskSetup.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "summary": "Definition The task setup hook gets triggered when you select the add-in from the dropdown in the task dialog or you edit an add-in's task. The task setup hook allows you to load and save data into the task. It also gives the ability to add custom tabs to the task setup dialog. This tabs are WinForms UserControls. IEdmTaskProperties object You may need, depending on your OnCmd implementation, to access the task properties. In PDMSDK, use base.Properties to get access to the IEdmTaskProperties property. This property returns null or nothing in hooks other than EdmTaskSetup and EdmTaskSetupButton. Creating an EdmTaskPage Tip If your task does not have any settings, you can completely ignore the EdmTaskSetup hook. There is no need to store data in the task. Consult the Task Sample from the SOLIDWORKS PDM Professional API help to see the default implementation of this hook. We highly recommend you use PDMSDK's because it saves a lot of time. You can add one of many custom tabs. In PDMSDK terminology, we call them task page. A task page is presented by the type EdmTaskPage. You need to be aware of two types: EdmTaskPage: It is a generic wrapper around the WinForms UserControl with built-in support for saving and loading data in the task. The data is serialized and deserialized. The data object must be a serialized class. the EdmTaskPage takes care of creating or loading an instance of your data class as well as saving into the task. Your data object is property called ViewModel in the EdmTaskPage. ITaskPage: An interface that the EdmTaskPage implements. Tip We highly recommend you use the PDMSDK Visual Studio Template because it comes ready with a boilerplate EdmTaskPage item to be added to your project. To add an EdmTaskSetup: Right-click on the Project in the Solution Explorer and click Add New Item... Look for EdmTaskPage, give it a new and click Add. By default, two items are added: The EdmTaskPage and the data object which is called EdmTaskPageViewModel. In the example below, the page is called Messaging. An EdmTaskPage is a WinForms UserControl. You can use the Visual Studio Toolbox to add and remove WinForms controls to and from it. Requirement: In the OnDataLoaded method in the EdmTaskPage, you can bind your the data object properties to the controls in the EdmTaskPage. Adding a new task page In the OnCmd implementation: Create instances of your task pages. Set the Container property in the EdmTaskPage to that of the AddInBase. We're passing the Container from the AddInBase to the EdmTaskPage. Set the Name property of the EdmTaskPage. You can also do this in the constructor. Call the method AddTaskSetupPages and supply it with an array of your task pages. Saving task page's data Warning You must reuse the same instance from the TaskSetup hook. Call the method StoreData in your EdmTaskPage. You may also call AddContextMenu to add a right-click that triggers the task launch from File Explorer if the task flags allow that. See the complete code example below. Example C Sharp VB Pages.Messaging taskSetupMessagingTab = default(Pages.Messaging); public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch (poCmd.meCmdType) { case EdmCmdType.EdmCmd_TaskSetup: { taskSetupMessagingTab = new Pages.Messaging(); taskSetupMessagingTab.Name = \"Messaging\"; taskSetupMessagingTab.Container = base.Container; AddTaskSetupPage(taskSetupMessagingTab); // or if you have multiple pages // AddTaskSetupPages(new BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage[] { taskSetupMessagingTab}); } break; case EdmCmdType.EdmCmd_TaskSetupButton: { // add a context menu AddContextMenu($\"Tasks\\\\{Properties.TaskName} [V{Identity.Version}]\", Identity.Description); // save the data of the tab taskSetupMessagingTab.StoreData(ref poCmd); } break; case EdmCmdType.EdmCmd_TaskDetails: break; case EdmCmdType.EdmCmd_TaskRun: break; case EdmCmdType.EdmCmd_TaskLaunch: break; case EdmCmdType.EdmCmd_TaskLaunchButton: default: break; } } catch (CancellationException e) { throw; } catch (TaskFailedException e) { throw; } // this is a PDM exception catch (COMException e) { throw; } catch (Exception e) { throw; } } Private taskSetupMessagingTab As Pages.Messaging = Nothing Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_TaskSetup taskSetupMessagingTab = New Pages.Messaging() taskSetupMessagingTab.Name = \"Messaging\" taskSetupMessagingTab.Container = MyBase.Container AddTaskSetupPage(taskSetupMessagingTab) ' Or if you have multiple pages ' AddTaskSetupPages(New BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage() {taskSetupMessagingTab}) Case EdmCmdType.EdmCmd_TaskSetupButton ' Add a context menu AddContextMenu($\"Tasks\\{Properties.TaskName} [V{Identity.Version}]\", Identity.Description) ' Save the data of the tab taskSetupMessagingTab.StoreData(poCmd) Case EdmCmdType.EdmCmd_TaskDetails ' Implement task details logic here Case EdmCmdType.EdmCmd_TaskRun ' Implement task run logic here Case EdmCmdType.EdmCmd_TaskLaunch ' Implement task launch logic here Case EdmCmdType.EdmCmd_TaskLaunchButton ' Implement task launch button logic here Case Else ' Default case logic End Select Catch e As CancellationException Throw Catch e As TaskFailedException Throw ' This is a PDM exception Catch e As COMException Throw Catch e As Exception Throw End Try End Sub Debugging Important You cannot debug task setup pages with Debug Add-ins... Make sure you have a fresh connection to PDM. Generally speaking, this is done by killing Conisioadmin.exe, edmserver.exe and explorer.exe and then restarting explorer.exe. This process can be done from the Windows task manager. Call AttachDebugger in your OnCmd. Compile code. Add the project files to your vault from the administration tool. Right-click on Add-ins and click New Add-in... Accept all dialogs. Right-click on Tasks and click New... Choose the add-in that you just added from the dropdown. AttachDebugger will be called immediately and you can attach Visual Studio to start debugging through your code. Tip You can use the directives #if DEBUG #endif to conditionally compile the AttachDebugger in the debug configuration. This will ignore it in the Release configuration which you can use in production. Be aware that release configurations do not automatically generate pdb files so your stack traces will not print in your error or logs."
  },
  "docs/TaskSetupButton.html": {
    "href": "docs/TaskSetupButton.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "summary": "Definition The task setup button hook gets triggered when you click on the OK or Cancel button in the following window. The task setup hook allows you to save data into the task. It also gives the ability add context menu if your task defines that in task flags. Saving task page's data Warning You must reuse the same instance from the TaskSetup hook. Call the method StoreData in your EdmTaskPage. You may also call AddContextMenu to add a right-click that triggers the task launch from File Explorer. See the complete code example below. Example C Sharp VB Pages.Messaging taskSetupMessagingTab = default(Pages.Messaging); public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch (poCmd.meCmdType) { case EdmCmdType.EdmCmd_TaskSetup: { taskSetupMessagingTab = new Pages.Messaging(); taskSetupMessagingTab.Container = base.Container; AddTaskSetupPage(taskSetupMessagingTab); // or if you have multiple pages // AddTaskSetupPages(new BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage[] { taskSetupMessagingTab}); } break; case EdmCmdType.EdmCmd_TaskSetupButton: { // add a context menu AddContextMenu($\"Tasks\\\\{Properties.TaskName} [V{Identity.Version}]\", Identity.Description); // save the data of the tab taskSetupMessagingTab.StoreData(ref poCmd); } break; case EdmCmdType.EdmCmd_TaskDetails: break; case EdmCmdType.EdmCmd_TaskRun: break; case EdmCmdType.EdmCmd_TaskLaunch: break; case EdmCmdType.EdmCmd_TaskLaunchButton: default: break; } } catch (CancellationException e) { throw; } catch (TaskFailedException e) { throw; } // this is a PDM exception catch (COMException e) { throw; } catch (Exception e) { throw; } } Private taskSetupMessagingTab As Pages.Messaging = Nothing Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_TaskSetup taskSetupMessagingTab = New Pages.Messaging() taskSetupMessagingTab.Container = MyBase.Container AddTaskSetupPage(taskSetupMessagingTab) ' Or if you have multiple pages ' AddTaskSetupPages(New BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage() {taskSetupMessagingTab}) Case EdmCmdType.EdmCmd_TaskSetupButton ' Add a context menu AddContextMenu($\"Tasks\\{Properties.TaskName} [V{Identity.Version}]\", Identity.Description) ' Save the data of the tab taskSetupMessagingTab.StoreData(poCmd) Case EdmCmdType.EdmCmd_TaskDetails ' Implement task details logic here Case EdmCmdType.EdmCmd_TaskRun ' Implement task run logic here Case EdmCmdType.EdmCmd_TaskLaunch ' Implement task launch logic here Case EdmCmdType.EdmCmd_TaskLaunchButton ' Implement task launch button logic here Case Else ' Default case logic End Select Catch e As CancellationException Throw Catch e As TaskFailedException Throw ' This is a PDM exception Catch e As COMException Throw Catch e As Exception Throw End Try End Sub Debugging Important You cannot debug task setup pages with Debug Add-ins... Make sure you have a fresh connection to PDM. Generally speaking, this is done by killing Conisioadmin.exe, edmserver.exe and explorer.exe and then restarting explorer.exe. This process can be done from the Windows task manager. Call AttachDebugger in your OnCmd. Compile code. Add the project files to your vault from the administration tool. Right-click on Add-ins and click New Add-in... Accept all dialogs. Right-click on Tasks and click New... Choose the add-in that you just added from the dropdown. AttachDebugger will be called immediately and you can attach Visual Studio to start debugging through your code. Tip You can use the directives #if DEBUG #endif to conditionally compile the AttachDebugger in the debug configuration. This will ignore it in the Release configuration which you can use in production. Be aware that release configurations do not automatically generate pdb files so your stack traces will not print in your error or logs."
  },
  "docs/Visual-Studio-SDK-template.html": {
    "href": "docs/Visual-Studio-SDK-template.html",
    "title": "Visual Studio SOLIDWORKS PDM SDK Template | SOLIDWORKS PDM SDK",
    "summary": "Visual Studio SOLIDWORKS PDM SDK Template The SDK template has the best boilerplate code written and ready for you to edit. Installing Visual Studio SOLIDWORKS PDM SDK Template Tip Always make sure you are using the latest version of the PDM SDK template. To find the latest version of the template, please check the Extensions window in your Visual Studio or follow this link. Tip All Visual Studio editions up to 2022 are supported. To install the Visual Studio SOLIDWORKS PDM SDK Template: Go to https://marketplace.visualstudio.com/items?itemName=BlueByteSystemsInc.ID Click Download In Windows 10 and on some computers, your downloaded files must be unblocked. To do, please right-click on the downloaded file, go to Properties and then check the Unblock checkbox before clicking again on Apply and then OK. Make sure that all instances of Visual Studio are closed. Open the Visual Studio Extension Installer (VSXI) and follow the instructions."
  },
  "docs/addinbase_structure.html": {
    "href": "docs/addinbase_structure.html",
    "title": "AddInBase structure | SOLIDWORKS PDM SDK",
    "summary": "AddInBase structure Note For the complete API reference of the AddInBase class, please refer to this page. In the SOLIDWORKS PDM API, your add-in's class must implement the IEdmAddIn5 interface. In PDMSDK, AddInBase is the only class that has to be inherited in order to create a working PDM add-in. This abstract class does implement the IEdmAddIn5 interface and packs a lot of useful functionlities. PDM add-ins can be broken down into two different types: Standard add-in Can hook into various PDM events such as check-in/check-out, state changes, adding/deleting files, etc... Task add-in Can be run as current or another specified user Can be run on current PC or another specified PC Can be scheduled to run at a specific time Can be set to execute as part of a document workflow While add-ins follow the simple client-server model, task add-ins are slightly more complex. A PDM workload can distributed to several task machines. The overall archiecture can be described by the following diagram: Tip SOLIDWORKS Corp defines tasks as feature in the administration tool that lets you configure, run, and monitor tasks that you perform frequently on SOLIDWORKS PDM files.. For more information, please visit this page. Definition attributes To configure an add-in and specify its functionality, attributes are used to decorate the class that implements AddInBase. The following attributes define what is shown in the Administration UI Properties of the add-in: [Name(\"Sample PDM Add-In\")] [CompanyName(\"My Company Name\")] [AddInVersion(false, 1)] [RequiredVersion(29, 0)] [Description(\"This is the description of what this add-in will do.\")] Task add-in specific attributes: [IsTask(true)] This defines whether the add-in is a task add in (true) or not (false). [TaskFlags(EdmTaskFlag flag)] These agruments indicate how the add-in can be incorporated into PDM. Note The framework automatically hooks into all task events when [IsTask()] is set to true, no need to use the [ListenFor(EdmCmdType event)] attribute]. Standard add-in attributes: [ListenFor(EdmCmdType event)] tells the add-in which PDM event to hook into. Each time a hooked event is triggered within PDM, it will call OnCmd(). Required Windows attributes: [ComVisible(true)] This allows PDM to see the add-in. [Guid(\"\")] A unique ID generated that is specific to your project. Note In Visual Studio, you can generate a new guid by going to Tools -> Create GUID. Common members Look up the help page for these members using the documentation link above. Property/Method Purpose Logger Returns the ILogger interface. Properties Returns the IEdmProperties object. Be aware that this is only available for EdmTaskSetupButton and EdmTaskSetup hooks. Otherwise, this property will turn null or nothing. Instance Returns the IEdmTaskInstance object. Be aware that this is only available for EdmTaskLaunch, Run and Details hooks. Otherwise, this property will return null or nothing. Identity This structure captures the values used in the definition attributes. Use the method ToCaption() to return the name of the add-in and its version without using string concatenation. This particularly useful for setting the title of a form. Container This dependency injection container will resolve any types that registered in the RegisterAdditionalTypes method. ForEach Provides a mechanism to apply a lambda expression to the affected items. Be aware that this is only valid for files (IEdmFile5). Other items affected by the command that are not files will be ignored. Note AddInBase contains properties and methods that sare pecific to task add-ins and are covered in further details in the next sections. Example C Sharp VB namespace MyPdmAddIn { [Name(\"Sample PDM Add-In\")] [CompanyName(\"My Company Name\")] [AddInVersion(false, 1)] [RequiredVersion(29, 0)] [Description(\"This is the description of what this add-in will do.\")] [IsTask(true)] [TaskFlags((int)EdmTaskFlag.EdmTask_SupportsChangeState + (int)EdmTaskFlag.EdmTask_SupportsDetails + (int)EdmTaskFlag.EdmTask_SupportsInitExec + (int)EdmTaskFlag.EdmTask_SupportsScheduling)] [ComVisible(true)] [Guid(\"0DF94D2F-9FCE-40E2-85E9-CCD5B9DE0DC6\")] public class AddIn : AddInBase { public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); // Add your add-in code here } } } To be provided. // if you see this, please contribute to our repo but providing a translation of C# to VB.NET"
  },
  "docs/adding_logic_oncmd.html": {
    "href": "docs/adding_logic_oncmd.html",
    "title": "Implementing OnCmd | SOLIDWORKS PDM SDK",
    "summary": "Implementing OnCmd Tip You do not need to be provide an implementation or override the GetAddInInfo method. PDMSDK takes care of setting the add-in information through the definition attributes discussed previously. The OnCmd gets called by PDM whenever a menu command or a hooked event is triggered. There are two arguments passed into this method: EdmCmd poCmd This object contains information about the event that triggered this call as well as attributes for the vault and vault view that triggered the event. Tip For complete information about EdmCmd, refer to this page EdmCmdData[] ppoData This object contains data about every object (file, folder, etc.) that this command will potentially affect. Common attributes that are passed through the EdmCmdData structure are: File path Id of affected file Id of affected folder, or parent folder of file Additional command specific information may be passed into this structure. Tip For complete information about EdmCmdData structure for all command types, refer to this page Working with EdmCmdData A common structure for to utilize OnCmd and its data will be to perform actions based on the command type using a switch statement. The command type is retrieved from poCmd.meCmdType A separate switch case can be added for each command type in order to keep the logic separate. Note To perform actions on a specific command type, that command must first be hooked using the [AddListener()] attribute. See this help page for more information. C Sharp VB public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); switch(poCmd.meCmdType) { case EdmCmdType.EdmCmd_PreUnlock: foreach(var ppoDatum in ppoData) { // Do something to each file before it is checked-in } break; } } Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) MyBase.OnCmd(poCmd, ppoData) Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_PreUnlock For Each ppoDatum In ppoData ' Do something to each file before it is checked-in Next End Select End Sub Tip To access the vault object, utilize this.Vault. If the vault object needs to implement additional features from a specific vault interface, it can be cast in this manner. var edmVault21 = this.Vault as IEdmVault21 Accessing Files and Folders Files and folders can be accessed by utilizing the IDs passed into the ppoData[] structure. The example below obtains the file object from the vault and can perform actions or checks on it prior to it being checked in. C Sharp VB case EdmCmdType.EdmCmd_PreUnlock: foreach (var ppoDatum in ppoData) { var filePath = ppoDatum.mbsStrData1; var fileId = ppoDatum.mlObjectID1; var folderId = ppoDatum.mlObjectID2; var edmFile = Vault.TryGetFileFromPath(filePath, out var edmFolder); // Do something with the file in question } break; Case EdmCmdType.EdmCmd_PreUnlock For Each ppoDatum In ppoData Dim filePath = ppoDatum.mbsStrData1 Dim fileId = ppoDatum.mlObjectID1 Dim folderId = ppoDatum.mlObjectID2 Dim edmFolder As EdmFolder Dim edmFile = Vault.TryGetFileFromPath(filePath, edmFolder) ' Do something with the file in question Next Canceling Actions If the OnCmd function needs to abort the current action, such as check-in or state change, the poCmd.mbCancel flag can be set by the user. Once the add-in finishes with the OnCmd method, it will allow or cancel the current action based on the value of this command. Example to cancel check-in: C Sharp VB case EdmCmdType.EdmCmd_PreUnlock: foreach (var ppoDatum in ppoData) { var filePath = ppoDatum.mbsStrData1; var fileId = ppoDatum.mlObjectID1; var folderId = ppoDatum.mlObjectID2; var edmFile = Vault.TryGetFileFromPath(filePath, out var edmFolder); if (edmFile.CurrentRevision == \"\") // if the revision is not blank, cancel the check-in { poCmd.mbCancel = Convert.ToInt16(true); // Sets to integer value of 1 break; } } break; Case EdmCmdType.EdmCmd_PreUnlock For Each ppoDatum In ppoData Dim filePath = ppoDatum.mbsStrData1 Dim fileId = ppoDatum.mlObjectID1 Dim folderId = ppoDatum.mlObjectID2 Dim edmFile = Vault.TryGetFileFromPath(filePath, edmFolder) If edmFile.CurrentRevision = \"\" Then ' if the revision is not blank, cancel the check-in poCmd.mbCancel = Convert.ToInt16(True) ' Sets to integer value of 1 Exit For End If Next Exit Select Note This cancellation applies to all files in the current command. It is not possible to allow some files to proceed while halting the action on others. Important Tasks support suspension and cancellation during the EdmTaskRun hook. PDMSDK provides a specific way to suspend and cancel tasks. Consult the task section for more information. Exception handling We highly recommend that you wrap your OnCmd implementation in a try catch block. Please catch the following exceptions when working with PDMSDK in this order: TaskFailedException: Thrown when a task fails. CancellationException: Thrown when a task is canceled by the user. COMException: Thrown when PDM (or another third-party application such as SOLIDWORKS ) throws an exception. Exception: To catch any .NET exception. C Sharp VB public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch(poCmd.meCmdType) { case EdmCmdType.EdmCmd_PreUnlock: foreach(var ppoDatum in ppoData) { // Do something to each file before it is checked-in } break; } } catch(TaskFailedException e) { } catch(CancellationException e) { } catch(COMException e) { } catch(Exception e) { } } Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData As EdmCmdData()) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_PreUnlock For Each ppoDatum In ppoData ' Do something to each file before it is checked-in Next End Select Catch e As TaskFailedException Catch e As CancellationException Catch e As COMException Catch e As Exception End Try End Sub"
  },
  "docs/binding.html": {
    "href": "docs/binding.html",
    "title": "Background | SOLIDWORKS PDM SDK",
    "summary": "Background EdmTaskPage inherits from the WinForms UserControl class. The idea behind using the MVVM architecture is to minimize the amount of codebehind in EdmTaskPages. The EdmTaskPage class contains a property called ViewModel. When you create a EdmTaskPage, you are required to specify the ViewModel's type as part of the generic class definition of the page. C Sharp VB public class myViewModelType : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; public void OnPropertyChanged([CallerMemberName] string propertyName = \"\") { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } public string FileName {get;set;} } public partial class myEdmTaskPage : EdmTaskPage<myViewModelType> { // this line to demo the logic - add controls through the usercontrol designer private System.Windows.Forms.TextBox FileNameTextBox; public myEdmTaskPage() { this.Name = \"myEdmTaskPage\"; InitializeComponent(); } } Imports System.ComponentModel Imports System.Runtime.CompilerServices Imports System.Windows.Forms Public Class myViewModelType Implements INotifyPropertyChanged Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged Protected Sub OnPropertyChanged(<CallerMemberName> Optional propertyName As String = \"\") RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName)) End Sub Private _fileName As String Public Property FileName As String Get Return _fileName End Get Set(value As String) If _fileName <> value Then _fileName = value OnPropertyChanged() End If End Set End Property End Class Public Partial Class myEdmTaskPage Inherits EdmTaskPage(Of myViewModelType) ' This line to demo the logic - add controls through the user control designer Private FileNameTextBox As TextBox Public Sub New() Me.Name = \"myEdmTaskPage\" InitializeComponent() End Sub Private Sub InitializeComponent() Me.FileNameTextBox = New TextBox() ' Additional initialization logic can be added here End Sub End Class Note Your view model type must implemented the .NET Component Model interface INotifyPropertyChanged. How binding works? In the view model, override the method OnDataLoaded. You can provide the binding between the control and the view model property. Example: C Sharp VB public override void OnDataLoaded() { base.OnDataLoaded(); FileNameTextBox.DataBindings.Add(new Binding(\"Text\", ViewModel, nameof(ViewModel.Enabled), false, DataSourceUpdateMode.OnPropertyChanged)); } Public Overrides Sub OnDataLoaded() MyBase.OnDataLoaded() FileNameTextBox.DataBindings.Add(New Binding(\"Text\", ViewModel, NameOf(ViewModel.Enabled), False, DataSourceUpdateMode.OnPropertyChanged)) End Sub All changes in the UI will propagate to the view model and no more code-behind is needed. ViewModel requirements Do not use internal properties. Do not use private setters. Always make sure the view model has a parameterless constructor. Note These requirements are necessary because EdmTaskPage uses Newtonsoft.Json to load and save the view model. How do I save the view model? Call the method StoreData during the TaskSetupButton hook. See full code example in the TaskSetup section."
  },
  "docs/building_project.html": {
    "href": "docs/building_project.html",
    "title": "Building the project | SOLIDWORKS PDM SDK",
    "summary": "Warning If you are viewing this page directly, we highly recommend you go back to the previous pages in this guide and review any missed steps. Building the project Locate the add-in project in the Solution Explorer and select it. By default, the Debug configuration will be selected. This information will be useful later in locating the output files. Right-click on the project and click Properties. Go the Build tab (for csproj ie: C# users) Check Register for COM interop Right-click on the project in the solution explorer and click Build If the project has built successfully, Visual Studio will print Build succeeded in the lower left side of the window. Note If you are a VB.NET user, the Register for com interop checkbox will be in the Compile tab. Output files Navigate to the bin/debug folder found in the project's folder. To locate the project folder, right-click on the project in the Solution Explorer and click Open Folder in File Explorer. The bin/debug will contain the: the dll of the add-in. the dlls of PDMSDK. Other dependencies you may have installed. Note We did not list the dll names of PDMSDK, because they are subject to change. We're working on reducing the number of dependencies. The most important dll that you will always have is called BlueByte.SOLIDWORKS.PDM.Professional.SDK."
  },
  "docs/commands.html": {
    "href": "docs/commands.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "summary": "Definition Commands in SOLIDWORKS PDM can be triggered from the toolbar menus, buttons, or the right-click menu. Conventionally, you add commands using the command manager IEdmCmdMgr5 in the GetAddInfo implementation. Commands in PDMSDK Since PDMSDK hides the GetAddInInfo implementation, we use the MenuAttribute to add commands capbilitites to your add-in. To add a command as part of the right-click menu: Start by defining an Enum for your commands. For example // this piece of code defines two commands. Make sure your commands values are unique. public enum Commands_e { Settings = 15615, ProcessFile = 475 } Decorate your add-in class with the MenuAttribute. Example: [Menu((int)Commands_e.ProcessFile, \"MyPDMAddIn\\\\Process File(s)\", 35, \"\",\"\",-1,0)] Tip Use \\\\ in the command caption to create sub menus. See the example above. Tip Please make you read the MenuAttribute constructors paramrters. The flags parameter defines the visibility of the command. The flags are a sum of the EdmMenuFlags enum. For the flags: Use 35 if you want to show the command in the RMB for files with support for single and multi-selection. Use 43 if you want to show the command in the RMB for files with support for single selection only. You can cast the value of EdmMenuFlags into an integer as a flag. For example (int)EdmMenuFlags.EdmMenu_Administration will add the menu to the right-click menu of the add-in the administration tool. OnCmd Implementation Commands trigger the OnCmd method. Make sure to approprietly check for the invoked command ID with poCmd.meCmdID and the command type with poCmd.meCmdType (In this case, it will EdmCmdType.EdmCmdMenu). Command Visibility With PDMSDK, you restrict commands to be visible to specific users, groups or users with specific permissions. You can do that via the CommandVisibilityAttribute attribute. Decorate your add-in class with the CommandVisibility attribute. The example below shows the settings command only the users with edit addins permission. [CommandVisibility((int)Commands_e.Settings, EdmSysPerm.EdmSysPerm_EditAddins)] Code sample C Sharp VB public enum Commands_e { Settings = 15615, ProcessFile = 475 } [Name(\"MyAddIn\")] [Description(\"MyAddIn Description\")] [CompanyName(\"Blue Byte Systems Inc.\")] [ListenFor(EdmCmdType.EdmCmd_Menu)] [Menu((int)Commands_e.ProcessFile, \"MyAddIn\\\\ProcessFile\", 35, \"\",\"\",-1,0)] [Menu((int)Commands_e.Settings, \"Settings\", (int)EdmMenuFlags.EdmMenu_Administration, \"\",\"\",-1,0)] [CommandVisibility((int)Commands_e.Settings, EdmSysPerm.EdmSysPerm_EditAddins)] [AddInVersion(false, 1)] [IsTask(false)] [RequiredVersion(10, 0)] [ComVisible(true)] [Guid(\"2968ACED-D471-4704-AC44-68B28549F8295\")] public partial class AddIn : AddInBase { public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch(poCmd.meCmdType) { case EdmCmdType.EdmCmd_Menu: if (poCmd.mlCmdID == (int)Commands_e.ProcessFile) { foreach(var ppoDatum in ppoData) { // Do something to each file before it is checked-in } return; } if (poCmd.mlCmdID == (int)Commands_e.Settings) { foreach(var ppoDatum in ppoData) { // show settings } } break; } } catch(TaskFailedException e) { } catch(CancellationException e) { } catch(COMException e) { } catch(Exception e) { } } } Public Enum Commands_e Settings = 15615 ProcessFile = 475 End Enum <Name(\"MyAddIn\")> <Description(\"MyAddIn Description\")> <CompanyName(\"Blue Byte Systems Inc.\")> <ListenFor(EdmCmdType.EdmCmd_Menu)> <Menu(CType(Commands_e.ProcessFile, Integer), \"MyAddIn\\ProcessFile\", 35, \"\", \"\", -1, 0)> <Menu(CType(Commands_e.Settings, Integer), \"Settings\", CType(EdmMenuFlags.EdmMenu_Administration, Integer), \"\", \"\", -1, 0)> <CommandVisibility(CType(Commands_e.Settings, Integer), EdmSysPerm.EdmSysPerm_EditAddins)> <AddInVersion(False, 1)> <IsTask(False)> <RequiredVersion(10, 0)> <ComVisible(True)> <Guid(\"2968ACED-D471-4704-AC44-68B28549F8295\")> Public Partial Class AddIn Inherits AddInBase Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData As EdmCmdData()) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_Menu If poCmd.mlCmdID = CInt(Commands_e.ProcessFile) Then For Each ppoDatum In ppoData ' Do something to each file before it is checked-in Next Return End If If poCmd.mlCmdID = CInt(Commands_e.Settings) Then For Each ppoDatum In ppoData ' Show settings Next End If End Select Catch e As TaskFailedException Catch e As CancellationException Catch e As COMException Catch e As Exception End Try End Sub End Class"
  },
  "docs/creating_new_project.html": {
    "href": "docs/creating_new_project.html",
    "title": "PDM SDK template | SOLIDWORKS PDM SDK",
    "summary": "PDM SDK template The PDM SDK Visual Studio project template saves time from having to rewrite the same boilerplate code everytime you write a new add-in. Note The set of instructions below use Visual Studio Community 2019. The same applies for older version of Visual Studio. To create a new add-in project, Open Visual Studio. We recommend you run VS as admin If you do not see the Visual Studio 2019, window Go to File > New Project... Select Create a new project... Configure your project by giving it a name and a location. Click OK. In the next window, search for PDM SDK Add-in Template. Important If you do not find the templates, this means that you were not able to install the PDM SDK Templates properly. Please refer to the previous page for more information. Warning Depending on your version of Visual Studio, you may need to filter the project templates by their programming language. There are two templates, one in C# and one in VB.NET. Choose which ever is best for you. When you choose the template, a PDMSDK specific window appears. Please give the add-in a name and description and complete the other fields. Click OK to create the add-in project. After you have entered the add-in's information and clicked OK, the SDK template will create your add-in files. Your Visual Studio will look something similar to this: Note The swigly lines under the code are there because we have not restored the PDM SDK nuget package yet. This is something that will be done in the next chapter. Note You may notice that the company name has not been ported correctly to AddIn.cs. This is a known issue in the SDK template."
  },
  "docs/debugging_with_sdk.html": {
    "href": "docs/debugging_with_sdk.html",
    "title": "Debugging Add-ins | SOLIDWORKS PDM SDK",
    "summary": "Debugging Add-ins Add-ins are stored in the file vault and are downloaded to and COM-registered on the client computer when they are needed. This presents a problem when developing a new add-in that you want to debug, because the add-in is re-registered in a folder that is different than the compiler’s output folder. Testing an add-in in a production vault can also be a problem, because it affects all users of the vault. SOLIDWORKS PDM Professional provides a menu command that solves these two problems, Debug Add-ins. When an add-in is installed as a debug add-in, it is registered only on your machine. No other users are affected by it. The add-in is also loaded from the location where it is registered. To debug an add-in using File Explorer: Open the Windows Task Manager. Kill the explorer.exe/edmserver.exe process. Right-click the project name in the Solution Explorer of Visual Studio and click Properties. Click the Debug tab. Click Start external program and type the File Explorer executable's path. For example: C:\\windows\\notepad.exe Click Debug > Start Debugging. Limitations Using notepad.exe as an external program has limitations: Open file dialog has no support for multi-select for files or folders Numerous steps required to be performed each time new debug session is started (i.e. click Open menu, navigate to vault, change filter). You cannot use Debug Add-ins to debug task add-ins. Tip We highly recommend you use our Console Debugger Tool for SOLIDWORKS PDM Professional add-ins. You can download the binaires from our release page in this repo. PDMSDK's AttachDebugger PDMSDK provides you with a built-in method in the base class called AttachDebugger that triggers the Visual Studio debugger to launch a window and asks which Visual Studio instance to use. All you need to do is: Call AttachDebugger in your OnCmd method Load the add-in either by adding it through New Add-in... or Debug Add-ins Trigger the add-in to execute by invoking of the hook you are watching or invoking a command. The add-in will prompt the debug dialog. Click OK to start debugging..."
  },
  "docs/dependencyinjection.html": {
    "href": "docs/dependencyinjection.html",
    "title": "Dependency Injection | SOLIDWORKS PDM SDK",
    "summary": "Dependency Injection PDMSDK provides some support for dependency injection (DI). The Container property in the AddInBase allows to resolve your types into instances. We use Simple Injector. Type registration Override the method OnRegisterAdditionalTypes. Example: C Sharp VB protected override void OnRegisterAdditionalTypes(Container container) { base.OnRegisterAdditionalTypes(container); container.Register<ISOLIDWORKSInstanceManager, SOLIDWORKSInstanceManager>(); container.RegisterSingleton<IEvaluationService, EvaluationService>(); container.RegisterSingleton <ISettingsManager,SettingsManager>(); } Protected Overrides Sub OnRegisterAdditionalTypes(container As Container) MyBase.OnRegisterAdditionalTypes(container) container.Register(Of ISOLIDWORKSInstanceManager, SOLIDWORKSInstanceManager)() container.RegisterSingleton(Of IEvaluationService, EvaluationService)() container.RegisterSingleton(Of ISettingsManager, SettingsManager)() End Sub You can call the Container property anywhere else in your AddInBase implementation and resolve a registered type to get an instance. Example: C Sharp VB var settingsManager = Container.GetInstance<ISettingsManager>(); Dim settingsManager As ISettingsManager = Container.GetInstance(Of ISettingsManager)()"
  },
  "docs/flags.html": {
    "href": "docs/flags.html",
    "title": "Task flags | SOLIDWORKS PDM SDK",
    "summary": "Task flags A task can be: Executed from a workflow transition as an action or a change command. Scheduled to execute via a command. The task is invoked in File Explorer through the file's context menu. Initialized from the Administration tool. A task can also contain a details page. The details page is accessible from the task list window. All of these features are controlled by the EdmTaskFlag enum. With PDMSDK, you can use the TaskFlags attribute to configure your add-in like below: C Sharp VB [TaskFlags((int)EdmTaskFlag.EdmTask_SupportsChangeState + (int)EdmTaskFlag.EdmTask_SupportsDetails + (int)EdmTaskFlag.EdmTask_SupportsInitExec +(int)EdmTaskFlag.EdmTask_SupportsScheduling)] [IsTask(true)] [RequiredVersion(10, 0)] [ComVisible(true)] [Guid(\"00000-00-4745-97F6-2029AFB70716\")] public partial class AddIn : AddInBase { public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) {} } Imports System.Runtime.InteropServices <TaskFlags(CInt(EdmTaskFlag.EdmTask_SupportsChangeState) + CInt(EdmTaskFlag.EdmTask_SupportsDetails) + CInt(EdmTaskFlag.EdmTask_SupportsInitExec) + CInt(EdmTaskFlag.EdmTask_SupportsScheduling))> <IsTask(True)> <RequiredVersion(10, 0)> <ComVisible(True)> <Guid(\"00000-00-4745-97F6-2029AFB70716\")> Public Partial Class AddIn Inherits AddInBase Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) End Sub End Class"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | SOLIDWORKS PDM SDK",
    "summary": "Getting Started Developing SOLIDWORKS PDM add-ins can be a dauting process and doing it efficiently is even more difficult endaveor. Following this guide is the easiest way to start writing SOLIDWORKS PDM add-ins with PDMSDK. Requirements You will need the following requestes to start writing code: Windows 7 or newer. SOLIDWORKS PDM client 2011 with a local view. A PDM user account with the right permissions. See below. Visual Studio. Elevated Windows admin privilges to run Visual Studio as an admin. Access to the command prompt to run some basic Windows commands. PDM Permissions Your PDM user have the following permissions: Be able to edit add-ins Workflow, file and folder permissions"
  },
  "docs/logger.html": {
    "href": "docs/logger.html",
    "title": "Logger | SOLIDWORKS PDM SDK",
    "summary": "Logger PDMSDK has a logger property that implements the ILogger interface called Logger. It allows for logging capabilites in your add-in. There are three built-in types of logger: File logger: This logs output to a text file. You must define the output location. SQL logger: This logs output to a table in a database. This logger requires a connection string and a table name. Console logger: If your add-in dll is called from a console application, you can use this logger to print output directly to the console. This logger does not require any initialization and is very useful in unit and integration tests. Important When working with the TaskDetails hook, some developers prefer to save the output of their logs in the task instance object. To access the log, the user needs to be have the proper task permissions. We highly recommend you use the Logger and save your logs to the vault file system instead. Configuration You can define the type of the logger by overriding the method OnLoggerTypeChosen and setting the logger type. C Sharp VB protected override void OnLoggerTypeChosen(LoggerType_e defaultType) { base.OnLoggerTypeChosen(LoggerType_e.File); } To be provided. // if you see this, please contribute to our repo by providing a translation of C# to VB.NET Note You can implement your own logger by implementing the ILogger interface and register it using the Container in the RegisterAdditionalTypes method. In this case, you can ignore the OnLoggerTypeChosen method. File Logger To use the file logger: Set the output location via the OutputLocation property. Call LogToOutput to log to output. Your target must be the name of your log file with its extension. SQL logger With the SQL logger, you must: Call the Init method in the implementation of the OnCmd method. Call StartConnection to start your connection with your SQL server. Call LogToOutput to log to output with target being the name of the table in your SQL table. Call EndConnection to end your connection with your SQL server."
  },
  "docs/taskadd-ins.html": {
    "href": "docs/taskadd-ins.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "summary": "Definition Task add-ins are the network distributed version PDM add-ins. You can create instances of the add-in called tasks and execute them on a specific computer in your PDM network. Programmtivally, The main difference is that a task add-in observes 5 different hooks which are: EdmTaskSetup EdmTaskSetupButton EdmTaskLaunch EdmTaskRun EdmTaskDetails Note Every task add-in is a PDM add-in but not every add-in is a PDM task add-in. Creating a task add-in Conventially, you need your command manager IEdmCmdMgr5 to add the hooks above in the implemention of your GetAddInInfo. This is how it is code using the code from the task sample from the SOLIDWORKS PDM Professional API help page. Public Sub GetAddInInfo(ByRef poInfo As EdmAddInInfo, ByVal poVault As IEdmVault5, ByVal poCmdMgr As IEdmCmdMgr5) Implements IEdmAddIn5.GetAddInInfo On Error GoTo ErrHand ' Fill in the add-in's description poInfo.mbsAddInName = \"Task Test Add-in\" poInfo.mbsCompany = \"SOLIDWORKS\" poInfo.mbsDescription = \"Add-in used to test the task execution system\" poInfo.mlAddInVersion = 1 ' Minimum SOLIDWORKS PDM Professional version needed for VB.NET add-ins is 2010 poInfo.mlRequiredVersionMajor = 10 poInfo.mlRequiredVersionMinor = 0 'Register this add-in as a task add-in poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskRun) 'Register this add-in as being able to append its own property pages in the Administration tool poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskSetup) 'Register this add-in to be called when the task is launched on the client computer poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskLaunch) 'Register this add-in to provide extra details in the Details dialog box in the task list in the Administration tool poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskDetails) 'Register this add-in to be called when the launch dialog box is closed poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskLaunchButton) 'Register this add-in to be called when the set-up wizard is closed poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskSetupButton) Exit Sub ErrHand: Dim v11 As IEdmVault11 v11 = poVault MsgBox(v11.GetErrorMessage(Err.Number)) End Sub Using PDMSDK The class that implements the AddInBase needs to be decorated with IsTask attribute. Note This attribute is already defined for you if you have used the PDM SDK Template to create your add-in project. C Sharp VB [IsTask(true)] [RequiredVersion(10, 0)] [ComVisible(true)] [Guid(\"00000-00-4745-97F6-2029AFB70716\")] public partial class AddIn : AddInBase { public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) {} } Imports System.Runtime.InteropServices <IsTask(True)> <RequiredVersion(10, 0)> <ComVisible(True)> <Guid(\"00000-00-4745-97F6-2029AFB70716\")> Public Partial Class AddIn Inherits AddInBase Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) ' Implement the method logic here End Sub End Class Warning Do not delete this attribute otherwise you will get an error dialog box when you add the add-in files in the vault. This attribute is required."
  },
  "docs/updating_nuget_packages.html": {
    "href": "docs/updating_nuget_packages.html",
    "title": "Using the Package Manager Console | SOLIDWORKS PDM SDK",
    "summary": "To fully utilize the latest features and bug fixes of the SDK, please make sure you are using the latest version of the BlueByte.PDMProfessional.SDK nuget package. Note BlueByte.PDMProfessional.SDK targets .NET framework 4.6.1. For more information, check out the nuget package page. The latest version of the nuget is: Using the Package Manager Console In Visual Studio: Press Ctrl + Q. This is going to highlight the search box at the top of the window. Type Nuget Package Manager Console and pick the first search result. A new window will appear. Allow a couple of seconds for the package manager to initialize. Type in the following command (and press enter): Update-Package BlueByte.SOLIDWORKS.PDMProfessional.SDK The command above will install the package in the active project. If you have multiple projects and you need to specify the one that needs to update the SDK nuget pacakge, use the -project argument to specify the project name. Example: Update-Package BlueByte.SOLIDWORKS.PDMProfessional.SDK -project MyAddInProject The Package Manager Console will report back that package has been installed successfully. Using the Package Manager In Visual Studio, Locate the add-in's project in the Solution Explorer Right-click on the project and click Manage Nuget Packages... The Package Manager window will open. Locate and select the BlueByte.SOLIDWORKS.PDMProfessional.SDK nuget package in the installed tab. Depending on the version of the SDK template, you may be to update the package if there is a new version. If an update is available, select the nuget package. The properties of the package will update on the right-side of the window and you are able to pick the latest available version from the version dropdown."
  },
  "index.html": {
    "href": "index.html",
    "title": "SOLIDWORKS PDM SDK | SOLIDWORKS PDM SDK",
    "summary": "SOLIDWORKS PDM SDK Introduction Thank you for choosing the Blue Byte Systems Inc. The SOLIDWORKS PDM SDK is the only available open source PDM SDK for SOLIDWORKS PDM to develop add-ins and PDM task add-ins. The SOLIDWORKS PDM Professional Application Programming Interface (API) is an OLE programming interface to SOLIDWORKS PDM Professional. PDMSDK is the only SOLIDWORKS PDM SDK that builds on top of the PDM API. Tip You can use VB.NET or C# to write add-ins with our Visual Studio template. See guide for more information. Tip If you are a new user, we highly recommed you start with our guide after reading our. See here. The API documentation of SDK is found here. Terms The SOLIDWORKS PDM SDK is a product of Blue Byte Systems Inc. It is not supported or endorsed by SOLIDWORKS Corporation. To request support, please reach out to us via our issues page at our GitHub. License Please review our licensing terms before using PDMSDK. This includes our PDMSDK nuget package and our Visual Studio Visual Studio templates."
  }
}