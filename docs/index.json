{
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.AddInBase.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.AddInBase.html",
    "title": "Class AddInBase | SOLIDWORKS PDM SDK",
    "keywords": "Class AddInBase Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Taskbase class. public abstract class AddInBase : IEdmAddIn5 Inheritance object AddInBase Implements IEdmAddIn5 Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors AddInBase() Create a new instance of the addIn base class. public AddInBase() Fields Identity Stores identity of the task add-in. public Identity Identity Field Value Identity Properties BeforeCancellationAction Gets or sets the before cancellation action. Use this to perform any clean up action. public Action BeforeCancellationAction { get; set; } Property Value Action The before cancellation action. BeforeYouCrash Action to execute before task crashes. public Action<Exception> BeforeYouCrash { get; set; } Property Value Action<Exception> CancellationAndSuspensionLogAction Gets or sets the cancellation and suspension log action. public Action<string> CancellationAndSuspensionLogAction { get; set; } Property Value Action<string> The cancellation and suspension log action. Use this action log event before the task gets suspended. CatchAllUnhandledException Catch all unhandled exceptions and log them. public bool CatchAllUnhandledException { get; set; } Property Value bool Container DI Container. public Container Container { get; } Property Value Container CurrentPosition Gets or sets the current position. public int CurrentPosition { get; set; } Property Value int The current position. Instance Task instance. public IEdmTaskInstance Instance { get; set; } Property Value IEdmTaskInstance IsInitialized Gets whether or not task is initialized (ie container and logger created). public bool IsInitialized { get; } Property Value bool LogType Gets or sets the type of the log. public Type LogType { get; set; } Property Value Type The type of the log. Logger Gets or sets the logger. public ILogger Logger { get; set; } Property Value ILogger LoggerType Sets the type of the logger to be used. public LoggerType_e LoggerType { get; set; } Property Value LoggerType_e Pages Task Pages public ITaskPage[] Pages { get; set; } Property Value ITaskPage[] Properties Properties public IEdmTaskProperties Properties { get; set; } Property Value IEdmTaskProperties Range Gets or sets the range. public int Range { get; set; } Property Value int The range. Vault Gets the vault object. public IEdmVault5 Vault { get; } Property Value IEdmVault5 Methods AddContextMenu(string, string) Adds a context menu item to PDM. protected void AddContextMenu(string menuText, string statusBarHelpText) Parameters menuText string Text that will appear in the context menu. statusBarHelpText string Text that will appear in the statusbar. AddDetailTaskPage(ITaskPage) Adds the detail task page. protected virtual void AddDetailTaskPage(ITaskPage taskDetailPage) Parameters taskDetailPage ITaskPage The task detail page. Please set the container property before calling this method. AddTaskSetupPage(ITaskPage) Add setup page to task. Use CreatePageInstance<T>() to create instance of a page that implements ITaskPage. protected void AddTaskSetupPage(ITaskPage taskSetupPage) Parameters taskSetupPage ITaskPage AddTaskSetupPages(ITaskPage[]) Add setup pages to task. protected virtual void AddTaskSetupPages(ITaskPage[] taskSetupPages) Parameters taskSetupPages ITaskPage[] Array of ITaskPage AttachDebugger() Attaches the debugger. public void AttachDebugger() CheckForCancellationOrSuspension(Action, Action<string>) Checks for cancellation or suspension. public virtual void CheckForCancellationOrSuspension(Action beforeCancellationAction, Action<string> cancellationAndSuspensionLogAction) Parameters beforeCancellationAction Action The before cancellation action. cancellationAndSuspensionLogAction Action<string> The cancellation and suspension log action. Exceptions CancellationException CreatePageInstance<T>() public ITaskPage CreatePageInstance<T>() where T : UserControl, ITaskPage Returns ITaskPage Type Parameters T ForEachDatum(ref EdmCmdData[], Action<EdmCmdData>) Performs an action on affected data while allowing user to cancel or pause task. public virtual void ForEachDatum(ref EdmCmdData[] affectedData, Action<EdmCmdData> Action) Parameters affectedData EdmCmdData[] Action Action<EdmCmdData> ForEachFile(ref EdmCmdData[], Action<IEdmFile5, IEdmFolder5>) Performs an action on affected file while allowing user to cancel or pause task. public virtual void ForEachFile(ref EdmCmdData[] affectedData, Action<IEdmFile5, IEdmFolder5> Action) Parameters affectedData EdmCmdData[] Action Action<IEdmFile5, IEdmFolder5> Remarks This ignore EdmCmdData that are not files. ForEachFile(ref EdmCmdData[], Action<IEdmFile5>) Performs an action on affected file while allowing user to cancel or pause task. public virtual void ForEachFile(ref EdmCmdData[] affectedData, Action<IEdmFile5> Action) Parameters affectedData EdmCmdData[] Action Action<IEdmFile5> Remarks This ignore EdmCmdData that are not files. GetAddInInfo(ref EdmAddInInfo, IEdmVault5, IEdmCmdMgr5) Fires when an add-in is setup. public virtual void GetAddInInfo(ref EdmAddInInfo poInfo, IEdmVault5 poVault, IEdmCmdMgr5 poCmdMgr) Parameters poInfo EdmAddInInfo Info object. poVault IEdmVault5 Vault object. poCmdMgr IEdmCmdMgr5 Command manager object. GetContainer() Returns the container object. public Container GetContainer() Returns Container GetSettings<T>() Deserialize the view model of the TaskPage<T>. Use this method in the EPDM.Interop.epdm.EdmCmdType.EdmCmd_TaskRun and EPDM.Interop.epdm.EdmCmdType.EdmCmd_TaskLaunch to get the settings. public virtual T GetSettings<T>() Returns T T Type Parameters T HandlesEvents(ref EdmCmd, ref EdmCmdData[]) Triggers when the clicks on a datacard button protected virtual void HandlesEvents(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) Parameters poCmd EdmCmd ppoData EdmCmdData[] Initialize() Initializes task (Registers types and creates logger). public virtual void Initialize() OnCmd(ref EdmCmd, ref EdmCmdData[]) Fires a response to a command that the add-in is hooked too is being trigger. public virtual void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) Parameters poCmd EdmCmd PDM command ppoData EdmCmdData[] Affected data OnLoadAdditionalAssemblies(DirectoryInfo) Load assemblies that failed loading. protected virtual void OnLoadAdditionalAssemblies(DirectoryInfo addinDirectory) Parameters addinDirectory DirectoryInfo Directory of the add-in. OnLoggerOutputSat(string) Sets the output folder of the logger. protected virtual void OnLoggerOutputSat(string defaultDirectory) Parameters defaultDirectory string OnLoggerTypeChosen(LoggerType_e) Sets the type of the logger. protected virtual void OnLoggerTypeChosen(LoggerType_e defaultType) Parameters defaultType LoggerType_e OnPDMLoggerInitialized() Called when [PDM logger initialized]. protected virtual void OnPDMLoggerInitialized() OnRegisterAdditionalTypes(Container) Registers additional types. protected virtual void OnRegisterAdditionalTypes(Container container) Parameters container Container OnTaskDetails(ref EdmCmd, ref EdmCmdData[]) Fires when task details are initialized public virtual void OnTaskDetails(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) Parameters poCmd EdmCmd Command ppoData EdmCmdData[] Affected documents OnTaskDialogWindowCreated(IEdmTaskInstance) Fires when the task dialog window is created. This occurs when you create a new task or edit an existing one. public virtual void OnTaskDialogWindowCreated(IEdmTaskInstance instance) Parameters instance IEdmTaskInstance OnTaskDialogWindowCreated(IEdmTaskProperties) Fires when the task dialog window is created. This occurs when you create a new task or edit an existing one. public virtual void OnTaskDialogWindowCreated(IEdmTaskProperties properties) Parameters properties IEdmTaskProperties OnTaskLaunch(ref EdmCmd, ref EdmCmdData[]) Fires when a task is launched. public virtual void OnTaskLaunch(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) Parameters poCmd EdmCmd Command ppoData EdmCmdData[] Affected documents OnTaskLaunchButton(ref EdmCmd, ref EdmCmdData[]) Fires when user clicks on the launch button. public virtual void OnTaskLaunchButton(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) Parameters poCmd EdmCmd Command ppoData EdmCmdData[] Affected documents OnTaskRun(ref EdmCmd, ref EdmCmdData[]) Fires when task runs on the executing machine. public virtual void OnTaskRun(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) Parameters poCmd EdmCmd Command ppoData EdmCmdData[] Affected documents OnTaskSetup(ref EdmCmd, ref EdmCmdData[]) Fires when task is setup. public void OnTaskSetup(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) Parameters poCmd EdmCmd ppoData EdmCmdData[] OnTaskSetupButton(ref EdmCmd, ref EdmCmdData[]) Fires when user clicks OK button in the task page. public virtual void OnTaskSetupButton(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) Parameters poCmd EdmCmd Command ppoData EdmCmdData[] Affected documents OnUnhandledExceptions(bool, Action<Exception>) Sets how to handle unhandled exceptions protected virtual void OnUnhandledExceptions(bool catchAllExceptions, Action<Exception> logAction = null) Parameters catchAllExceptions bool logAction Action<Exception> RegisterTypes() Fires when the application is initialized. Register types of calling assembly. protected virtual void RegisterTypes() SetRange(int, int, string) Sets the progress range. Should be done only once at the start of the task execution public virtual void SetRange(int range, int currentPosition, string message = null) Parameters range int Initialized range currentPosition int Initial position message string message Remarks This method also checks for cancellation and suspension requests made by the user. Exceptions Exception UpdateTaskMessage(int, string) Sets the progress bar position. public virtual void UpdateTaskMessage(int currentPosition, string message = null) Parameters currentPosition int message string"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.AddInVersionAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.AddInVersionAttribute.html",
    "title": "Class AddInVersionAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class AddInVersionAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public class AddInVersionAttribute : Attribute, _Attribute Inheritance object Attribute AddInVersionAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors AddInVersionAttribute(bool, int) public AddInVersionAttribute(bool useAssemblyFileRevision, int version = 0) Parameters useAssemblyFileRevision bool version int Properties UseAssemblyFileRevision Use this option for frequent builds. public bool UseAssemblyFileRevision { get; set; } Property Value bool Version Specific version. public int Version { get; set; } Property Value int"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.CommandVisibilityAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.CommandVisibilityAttribute.html",
    "title": "Class CommandVisibilityAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class CommandVisibilityAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Command visiblity attribute. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class CommandVisibilityAttribute : Attribute, _Attribute Inheritance object Attribute CommandVisibilityAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks AddInBase will ignore multiple attributes with the same menu id and will only pick one. Constructors CommandVisibilityAttribute() Creates new instance of this class. public CommandVisibilityAttribute() CommandVisibilityAttribute(int) Creates a new instance of this class. public CommandVisibilityAttribute(int commandId) Parameters commandId int Command ID. CommandVisibilityAttribute(int, EdmSysPerm) Creates a new instance of this class. public CommandVisibilityAttribute(int commandId, EdmSysPerm onlyShowToUsersWithThesePermissions) Parameters commandId int Command id. onlyShowToUsersWithThesePermissions EdmSysPerm Only show this command to users who have these permissions. CommandVisibilityAttribute(int, string[]) Create a new instance of this class. public CommandVisibilityAttribute(int commandId, string[] hideFromTheseUserOrGroupNames) Parameters commandId int hideFromTheseUserOrGroupNames string[] Properties CommandID ID of the affected command. public int CommandID { get; set; } Property Value int HideFromTheseUserOrGroupNames Hide from these user or group names. public string[] HideFromTheseUserOrGroupNames { get; set; } Property Value string[] OnlyShowToUsersWithThesePermissions Sets or gets the permissions of the users to whom to show the command. public EdmSysPerm OnlyShowToUsersWithThesePermissions { get; set; } Property Value EdmSysPerm"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.CompanyNameAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.CompanyNameAttribute.html",
    "title": "Class CompanyNameAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class CompanyNameAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public class CompanyNameAttribute : Attribute, _Attribute Inheritance object Attribute CompanyNameAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors CompanyNameAttribute(string) public CompanyNameAttribute(string value) Parameters value string Properties CompanyName public string CompanyName { get; set; } Property Value string"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.DescriptionAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.DescriptionAttribute.html",
    "title": "Class DescriptionAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class DescriptionAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public class DescriptionAttribute : Attribute, _Attribute Inheritance object Attribute DescriptionAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors DescriptionAttribute(string) public DescriptionAttribute(string value) Parameters value string Properties Description public string Description { get; set; } Property Value string"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.HandlesAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.HandlesAttribute.html",
    "title": "Class HandlesAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class HandlesAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Add command menu attribute. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class HandlesAttribute : Attribute, _Attribute Inheritance object Attribute HandlesAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors HandlesAttribute(EdmCmdType) public HandlesAttribute(EdmCmdType eventName) Parameters eventName EdmCmdType Properties EventName Event name. public EdmCmdType EventName { get; set; } Property Value EdmCmdType"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.IsTaskAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.IsTaskAttribute.html",
    "title": "Class IsTaskAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class IsTaskAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Use this to make an add-in a task public class IsTaskAttribute : Attribute, _Attribute Inheritance object Attribute IsTaskAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors IsTaskAttribute(bool) public IsTaskAttribute(bool isTask) Parameters isTask bool Properties IsTask Gets or sets whether the add-in is a custom task. public bool IsTask { get; set; } Property Value bool"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.ListenForAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.ListenForAttribute.html",
    "title": "Class ListenForAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class ListenForAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class ListenForAttribute : Attribute, _Attribute Inheritance object Attribute ListenForAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors ListenForAttribute(EdmCmdType) Creates a new instance of the ListenFor attribute public ListenForAttribute(EdmCmdType _event) Parameters _event EdmCmdType Properties Event PDM event to listen to public EdmCmdType Event { get; } Property Value EdmCmdType"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.MenuAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.MenuAttribute.html",
    "title": "Class MenuAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class MenuAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Add command menu attribute. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class MenuAttribute : Attribute, _Attribute Inheritance object Attribute MenuAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors MenuAttribute(int, string, int, string) Creates a command menu. public MenuAttribute(int ID, string menuCaption, int flags = 0, string callback = \"\") Parameters ID int ID of the command. menuCaption string Text that will appear in the menu. flags int Where the menu will appear. callback string Callback MenuAttribute(int, string, int, string, string, int, int) Creates a command menu. public MenuAttribute(int ID, string menuCaption, int flags = 0, string statusBarHelp = \"\", string toolTip = \"\", int toolButtonIndex = -1, int toolbarImageID = 0) Parameters ID int ID of the command. menuCaption string Text that will appear in the menu. flags int Where the menu will appear. statusBarHelp string Help message that will appear in the status bar. toolTip string Help message that appear in the Windows tooltip. toolButtonIndex int Index of the command button. toolbarImageID int ID of the toolbar image. Properties Callback Gets or sets the callback. public string Callback { get; set; } Property Value string The callback. Remarks This is not implemented yet. Flags Where the menu will appear. This is a combination of EPDM.Interop.epdm.EdmMenuFlags public int Flags { get; } Property Value int ID ID of the command. public int ID { get; } Property Value int MenuCaption Text that will appear in the menu. public string MenuCaption { get; } Property Value string StatusBarHelp Help message that will appear in the status bar. public string StatusBarHelp { get; } Property Value string ToolButtonIndex Index of the command button. public int ToolButtonIndex { get; } Property Value int ToolbarImageID ID of the toolbar image. public int ToolbarImageID { get; } Property Value int Tooltip Help message that appear in the Windows tooltip public string Tooltip { get; } Property Value string"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.NameAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.NameAttribute.html",
    "title": "Class NameAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class NameAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public class NameAttribute : Attribute, _Attribute Inheritance object Attribute NameAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors NameAttribute(string) public NameAttribute(string value) Parameters value string Properties Name public string Name { get; set; } Property Value string"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.RequiredVersionAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.RequiredVersionAttribute.html",
    "title": "Class RequiredVersionAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class RequiredVersionAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Minium supported PDM Version. public class RequiredVersionAttribute : Attribute, _Attribute Inheritance object Attribute RequiredVersionAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors RequiredVersionAttribute(Year_e, ServicePack_e) Initializes a new instance of the RequiredVersionAttribute class. public RequiredVersionAttribute(Year_e PDMYear, ServicePack_e ServicePack) Parameters PDMYear Year_e The PDM year. ServicePack ServicePack_e The service pack. RequiredVersionAttribute(int, int) Initializes a new instance of the RequiredVersionAttribute class. public RequiredVersionAttribute(int major, int minor) Parameters major int The major. minor int The minor. Properties Major Gets or sets the major. public int Major { get; set; } Property Value int The major. Minor Gets or sets the minor. public int Minor { get; set; } Property Value int The minor. See Also Attribute"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.TaskFlagsAttribute.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.TaskFlagsAttribute.html",
    "title": "Class TaskFlagsAttribute | SOLIDWORKS PDM SDK",
    "keywords": "Class TaskFlagsAttribute Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Task flags enum. public class TaskFlagsAttribute : Attribute, _Attribute Inheritance object Attribute TaskFlagsAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors TaskFlagsAttribute(int) Task flag enum. public TaskFlagsAttribute(int flags) Parameters flags int Sum of all flags Properties Flags public int Flags { get; } Property Value int"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes.html",
    "title": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes | SOLIDWORKS PDM SDK",
    "keywords": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes Classes AddInVersionAttribute CommandVisibilityAttribute Command visiblity attribute. CompanyNameAttribute DescriptionAttribute HandlesAttribute Add command menu attribute. IsTaskAttribute Use this to make an add-in a task ListenForAttribute MenuAttribute Add command menu attribute. NameAttribute RequiredVersionAttribute Minium supported PDM Version. TaskFlagsAttribute Task flags enum."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.CancellationException.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.CancellationException.html",
    "title": "Class CancellationException | SOLIDWORKS PDM SDK",
    "keywords": "Class CancellationException Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll [Serializable] public class CancellationException : Exception, ISerializable, _Exception Inheritance object Exception CancellationException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors CancellationException() public CancellationException() CancellationException(SerializationInfo, StreamingContext) protected CancellationException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext CancellationException(string) public CancellationException(string message) Parameters message string CancellationException(string, Exception) public CancellationException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage.html",
    "title": "Interface ITaskPage | SOLIDWORKS PDM SDK",
    "keywords": "Interface ITaskPage Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll task page page. public interface ITaskPage Properties Container Gets or sets the container. This is used in LoadData(ref EdmCmd) and StoreData(ref EdmCmd) Container Container { get; set; } Property Value Container Name Name of the setup page. string Name { get; set; } Property Value string Methods LoadData(ref EdmCmd) Loads data from the task. void LoadData(ref EdmCmd cmd) Parameters cmd EdmCmd EdmCmd specific to the EPDM.Interop.epdm.EdmCmdType.EdmCmd_TaskSetup or EPDM.Interop.epdm.EdmCmdType.EdmCmd_TaskDetailshook. LoadSettings() Loads task settings from a file void LoadSettings() SaveSettings() Saves task settings to a file void SaveSettings() StoreData(ref EdmCmd) void StoreData(ref EdmCmd cmd) Parameters cmd EdmCmd"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.TaskPage-1.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.TaskPage-1.html",
    "title": "Class TaskPage<T> | SOLIDWORKS PDM SDK",
    "keywords": "Class TaskPage<T> Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Task page. Use this to add a UI component (Usercontrol) to EPDM.Interop.epdm.EdmCmdType.EdmCmd_TaskSetup and EPDM.Interop.epdm.EdmCmdType.EdmCmd_TaskDetails public class TaskPage<T> : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl, ITaskPage where T : INotifyPropertyChanged Type Parameters T ViewModel Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl TaskPage<T> Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl ITaskPage Inherited Members UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(ref Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.AdjustFormScrollbars(bool) ContainerControl.Dispose(bool) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(ref Message, Keys) ContainerControl.ProcessMnemonic(char) ContainerControl.ProcessTabKey(bool) ContainerControl.Select(bool, bool) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(ref Message) Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.ProcessKeyPreview(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SetBoundsCore(int, int, int, int, BoundsSpecified) Control.SetClientSizeCore(int, int) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.SetVisibleCore(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TaskPage() Creates a new instance of the task page. public TaskPage() Properties Container Container public Container Container { get; set; } Property Value Container Name Name of the setup page. public string Name { get; set; } Property Value string SaveLoadDataToVariable Saves and loads data from variable public bool SaveLoadDataToVariable { get; set; } Property Value bool SaveLoadDataToVariableId Id of the variable to save and load data from. public int SaveLoadDataToVariableId { get; set; } Property Value int Vault Gets the vault object. public IEdmVault5 Vault { get; } Property Value IEdmVault5 ViewModel ViewModel public T ViewModel { get; set; } Property Value T Methods ClearDataBindings(Control) Clears data bindings all of children. public void ClearDataBindings(Control rootControl) Parameters rootControl Control The root control. LoadData(ref EdmCmd) Load data. public virtual void LoadData(ref EdmCmd cmd) Parameters cmd EdmCmd Cmd LoadSettings() Loads task settings from a file public virtual void LoadSettings() OnDataLoaded() Fires when data is loaded. Clear all bindings from all controls by invoking ClearDataBindings(Control) public virtual void OnDataLoaded() SaveSettings() Saves task settings to a file public virtual void SaveSettings() StoreData(ref EdmCmd) Stores Data public virtual void StoreData(ref EdmCmd cmd) Parameters cmd EdmCmd"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.html",
    "title": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core | SOLIDWORKS PDM SDK",
    "keywords": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core Classes TaskPage<T> Task page. Use this to add a UI component (Usercontrol) to EPDM.Interop.epdm.EdmCmdType.EdmCmd_TaskSetup and EPDM.Interop.epdm.EdmCmdType.EdmCmd_TaskDetails Interfaces ITaskPage task page page."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.ILogger.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.ILogger.html",
    "title": "Interface ILogger | SOLIDWORKS PDM SDK",
    "keywords": "Interface ILogger Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Logger. public interface ILogger Properties OutputLocation Ouput location. Relative path does not work. string OutputLocation { get; set; } Property Value string Methods EndConnection() Ends the connection with the SQLServer void EndConnection() GetLoggerType() Returns the type of the logger. LoggerType_e GetLoggerType() Returns LoggerType_e Init(Identity, IEdmTaskInstance, string) Initialize the logger. void Init(Identity identity, IEdmTaskInstance instance, string connectionString) Parameters identity Identity The identity struct. instance IEdmTaskInstance Task instance. connectionString string The connection string. LogToOutput(string, object) Logs value to output. void LogToOutput(string target, object value) Parameters target string Text file path. This is the name of the table when GetLoggerType() returns SQL value object New value. StartConnection() Starts a connection with the SQL server. Call this method after you call Init(Identity, IEdmTaskInstance, string). void StartConnection()"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.IPDMLogger.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.IPDMLogger.html",
    "title": "Interface IPDMLogger | SOLIDWORKS PDM SDK",
    "keywords": "Interface IPDMLogger Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public interface IPDMLogger : IDisposable Inherited Members IDisposable.Dispose() Methods CommitToVault(string) Commits log entry to vault. void CommitToVault(string logEntryOrTarget) Parameters logEntryOrTarget string The log entry or target. GetAllLogsFromVault() Gets the logs from vault. List<Tuple<string, object[]>> GetAllLogsFromVault() Returns List<Tuple<string, object[]>>"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.LoggerBase.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.LoggerBase.html",
    "title": "Class LoggerBase | SOLIDWORKS PDM SDK",
    "keywords": "Class LoggerBase Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Base class for all loggers. public abstract class LoggerBase Inheritance object LoggerBase Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetLoggerType() Gets the type of the logger. public LoggerType_e GetLoggerType() Returns LoggerType_e Exceptions Exception Could not infer type of logger. Make sure to choose the logger type."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.LoggerType_e.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.LoggerType_e.html",
    "title": "Enum LoggerType_e | SOLIDWORKS PDM SDK",
    "keywords": "Enum LoggerType_e Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Logger type public enum LoggerType_e Fields Console = 1 Console File = 2 File system PDM = 0 PDM SQL = 3 SQL"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics.html",
    "title": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics | SOLIDWORKS PDM SDK",
    "keywords": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics Classes LoggerBase Base class for all loggers. Interfaces ILogger Logger. IPDMLogger Enums LoggerType_e Logger type"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums.PDMSDKEdmMenuFlags.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums.PDMSDKEdmMenuFlags.html",
    "title": "Enum PDMSDKEdmMenuFlags | SOLIDWORKS PDM SDK",
    "keywords": "Enum PDMSDKEdmMenuFlags Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Advanced version of the EPDM.Interop.epdm.EdmMenuFlags public enum PDMSDKEdmMenuFlags Fields EdmMenu_Administration = 512 The edm menu administration EdmMenu_ContextMenuItem = 1024 The edm menu context menu item EdmMenu_ContextMenuItemFolder = 2048 The edm menu context menu item folder EdmMenu_HasToolbarButton = 128 The edm menu has toolbar button EdmMenu_HastItemToolbarButton = 8192 The edm menu hast item toolbar button EdmMenu_ItemToolsMenu = 4096 The edm menu item tools menu EdmMenu_MustHaveSelection = 1 The edm menu must have selection EdmMenu_NeverInContextMenu = 64 The edm menu never in context menu EdmMenu_Nothing = 0 The edm menu nothing EdmMenu_OnlyFiles = 2 The edm menu only files EdmMenu_OnlyFolders = 4 The edm menu only folders EdmMenu_OnlyInContextMenu = 32 The edm menu only in context menu EdmMenu_OnlyMultipleSelection = 16 The edm menu only multiple selection EdmMenu_OnlySingleSelection = 8 The edm menu only single selection EdmMenu_OwnerDrawToolbarButton = 256 The edm menu owner draw toolbar button EdmMenu_ShowInMenuBarAction = 16384 The edm menu show in menu bar action EdmMenu_ShowInMenuBarDisplay = 65536 The edm menu show in menu bar display EdmMenu_ShowInMenuBarModify = 32768 The edm menu show in menu bar modify EdmMenu_ShowInMenuBarTools = 131072 The edm menu show in menu bar tools PDMSDK_EdmMenu_OnlyFilesInFileExplorer = 43 The PDMSDK edm menu only files in file explorer"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums.ServicePack_e.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums.ServicePack_e.html",
    "title": "Enum ServicePack_e | SOLIDWORKS PDM SDK",
    "keywords": "Enum ServicePack_e Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll PDM Professional service. Some service pack for specific year may not exist. Please check this link for the release notes. public enum ServicePack_e Fields SP0 = 0 Service pack. SP1 = 1 Service pack. SP2 = 2 Service pack. SP3 = 3 Service pack. SP4 = 4 Service pack. SP5 = 5 Service pack."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums.Year_e.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums.Year_e.html",
    "title": "Enum Year_e | SOLIDWORKS PDM SDK",
    "keywords": "Enum Year_e Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll PDM Professional year. public enum Year_e Fields PDM2006 = 6 PDM Professional 2006. PDM2007 = 7 PDM Professional 2007. PDM2008 = 8 PDM Professional 2008. PDM2009 = 9 PDM Professional 2009. PDM2010 = 10 PDM Professional 2010. PDM2011 = 11 PDM Professional 2011. PDM2012 = 12 PDM Professional 2012. PDM2013 = 13 PDM Professional 2013. PDM2014 = 14 PDM Professional 2014. PDM2015 = 15 PDM Professional 2015. PDM2016 = 16 PDM Professional 2016. PDM2017 = 17 PDM Professional 2017. PDM2018 = 18 PDM Professional 2018. PDM2019 = 19 PDM Professional 2019. PDM2020 = 20 PDM Professional 2020. PDM2021 = 21 PDM Professional 2021. PDM2022 = 22 PDM Professional 2022. PDM2023 = 23 PDM Professional 2023. PDM2024 = 24 PDM Professional 2024. PDM2025 = 25 PDM Professional 2025."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums.html",
    "title": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums | SOLIDWORKS PDM SDK",
    "keywords": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums Enums PDMSDKEdmMenuFlags Advanced version of the EPDM.Interop.epdm.EdmMenuFlags ServicePack_e PDM Professional service. Some service pack for specific year may not exist. Please check this link for the release notes. Year_e PDM Professional year."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions.ITaskSetupPageNotUserControlException.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions.ITaskSetupPageNotUserControlException.html",
    "title": "Class ITaskSetupPageNotUserControlException | SOLIDWORKS PDM SDK",
    "keywords": "Class ITaskSetupPageNotUserControlException Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Fires when the supplied ITaskPage is not a UserControl. public class ITaskSetupPageNotUserControlException : PDMSDKException, ISerializable, _Exception Inheritance object Exception PDMSDKException ITaskSetupPageNotUserControlException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors ITaskSetupPageNotUserControlException(string, Exception) Creates a new instance of the base exception. public ITaskSetupPageNotUserControlException(string message, Exception innerException) Parameters message string Message. innerException Exception Inner exception."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions.IdentityInfoException.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions.IdentityInfoException.html",
    "title": "Class IdentityInfoException | SOLIDWORKS PDM SDK",
    "keywords": "Class IdentityInfoException Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Fires in GetAddInInfo(ref EdmAddInInfo, IEdmVault5, IEdmCmdMgr5) if attribute is missing. public class IdentityInfoException : PDMSDKException, ISerializable, _Exception Inheritance object Exception PDMSDKException IdentityInfoException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors IdentityInfoException() Creates a new instance of the base exception. public IdentityInfoException() IdentityInfoException(string, Exception) Creates a new instance of the base exception. public IdentityInfoException(string message, Exception innerException) Parameters message string Message. innerException Exception Inner exception."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions.PDMSDKException.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions.PDMSDKException.html",
    "title": "Class PDMSDKException | SOLIDWORKS PDM SDK",
    "keywords": "Class PDMSDKException Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Base exception. public class PDMSDKException : Exception, ISerializable, _Exception Inheritance object Exception PDMSDKException Implements ISerializable _Exception Derived ITaskSetupPageNotUserControlException IdentityInfoException Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors PDMSDKException() Creates a new instance of the base exception. public PDMSDKException() PDMSDKException(string, Exception) Creates a new instance of the base exception. public PDMSDKException(string message, Exception innerException) Parameters message string Message. innerException Exception Inner exception."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions.html",
    "title": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions | SOLIDWORKS PDM SDK",
    "keywords": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions Classes ITaskSetupPageNotUserControlException Fires when the supplied ITaskPage is not a UserControl. IdentityInfoException Fires in GetAddInInfo(ref EdmAddInInfo, IEdmVault5, IEdmCmdMgr5) if attribute is missing. PDMSDKException Base exception."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Identity.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.Identity.html",
    "title": "Struct Identity | SOLIDWORKS PDM SDK",
    "keywords": "Struct Identity Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Add-in identity. public struct Identity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Fields CompanyName Company name public string CompanyName Field Value string Description Description public string Description Field Value string Name Name public string Name Field Value string RequiredMajorVersion Required major version. public int RequiredMajorVersion Field Value int RequiredMinorVersion Required minor. public int RequiredMinorVersion Field Value int Version Add-in version public int Version Field Value int Properties Vault Gets or sets the vault. public IEdmVault5 Vault { get; set; } Property Value IEdmVault5 The vault. Methods ToCaption() Converts to caption. public string ToCaption() Returns string ToCaption(string) Converts to caption. public string ToCaption(string specificWindowTitle = \"\") Parameters specificWindowTitle string The specific window title. Returns string"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.TaskFailedException.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.TaskFailedException.html",
    "title": "Class TaskFailedException | SOLIDWORKS PDM SDK",
    "keywords": "Class TaskFailedException Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll [Serializable] public class TaskFailedException : Exception, ISerializable, _Exception Inheritance object Exception TaskFailedException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors TaskFailedException() public TaskFailedException() TaskFailedException(SerializationInfo, StreamingContext) protected TaskFailedException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext TaskFailedException(string) public TaskFailedException(string message) Parameters message string TaskFailedException(string, Exception) public TaskFailedException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.SDK.html",
    "title": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK | SOLIDWORKS PDM SDK",
    "keywords": "Namespace BlueByte.SOLIDWORKS.PDMProfessional.SDK Namespaces BlueByte.SOLIDWORKS.PDMProfessional.SDK.Attributes BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core BlueByte.SOLIDWORKS.PDMProfessional.SDK.Diagnostics BlueByte.SOLIDWORKS.PDMProfessional.SDK.Enums BlueByte.SOLIDWORKS.PDMProfessional.SDK.Exceptions Classes AddInBase Taskbase class. CancellationException TaskFailedException Structs Identity Add-in identity."
  },
  "api/BlueByte.SOLIDWORKS.PDMProfessional.html": {
    "href": "api/BlueByte.SOLIDWORKS.PDMProfessional.html",
    "title": "BlueByte.SOLIDWORKS.PDMProfessional | SOLIDWORKS PDM SDK",
    "keywords": "BlueByte.SOLIDWORKS.PDMProfessional This documentation covers the BlueByte.SOLIDWORKS.PDMProfessional API. Note: This API shares its name with the .Extensions NuGet package, which provides additional functionality and extensions for this library. NuGet Package Installation To install the main package, run: dotnet add package BlueByte.SOLIDWORKS.PDMProfessional To install the extensions package, run: dotnet add package BlueByte.SOLIDWORKS.PDMProfessional.Extensions"
  },
  "api/BlueByte.SOLIDWORKS.html": {
    "href": "api/BlueByte.SOLIDWORKS.html",
    "title": "BlueByte.SOLIDWORKS Namespace | SOLIDWORKS PDM SDK",
    "keywords": "BlueByte.SOLIDWORKS Namespace This namespace contains types related to SOLIDWORKS."
  },
  "api/BlueByte.html": {
    "href": "api/BlueByte.html",
    "title": "BlueByte Namespace | SOLIDWORKS PDM SDK",
    "keywords": "BlueByte Namespace The BlueByte namespace contains core classes and utilities for Blue Byte Systems Inc. projects. It provides foundational components used throughout the SDK."
  },
  "api/Xarial.XToolkit.FileFilter.html": {
    "href": "api/Xarial.XToolkit.FileFilter.html",
    "title": "Class FileFilter | SOLIDWORKS PDM SDK",
    "keywords": "Class FileFilter Namespace Xarial.XToolkit Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Represents the file fltering helper class public class FileFilter Inheritance object FileFilter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FileFilter(string, params string[]) Constructor public FileFilter(string name, params string[] exts) Parameters name string User friendly name of the filter exts string[] List of extensions Properties AllFiles All files filter public static FileFilter AllFiles { get; } Property Value FileFilter Extensions Filter extensions with wildcards (e.g. *.txt) public string[] Extensions { get; } Property Value string[] ImageFiles Image files filter public static FileFilter ImageFiles { get; } Property Value FileFilter Name Name of the filter public string Name { get; } Property Value string Methods BuildFilterString(params FileFilter[]) Combines filters into a string which can be used in file prowsing public static string BuildFilterString(params FileFilter[] filters) Parameters filters FileFilter[] Filters Returns string Combines string Create(string, params string[]) Creates new filter public static FileFilter Create(string name, params string[] exts) Parameters name string User friendly name of the filter exts string[] List of extensions Returns FileFilter Filter"
  },
  "api/Xarial.XToolkit.FileSystemUtils.html": {
    "href": "api/Xarial.XToolkit.FileSystemUtils.html",
    "title": "Class FileSystemUtils | SOLIDWORKS PDM SDK",
    "keywords": "Class FileSystemUtils Namespace Xarial.XToolkit Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public static class FileSystemUtils Inheritance object FileSystemUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods BrowseFileInExplorer(string) Opens file explorer and selects specified file public static void BrowseFileInExplorer(string path) Parameters path string BrowseFolderInExplorer(string) Opens file explorer at the specified folder public static void BrowseFolderInExplorer(string path) Parameters path string CombinePaths(string, params string[]) Combines the directory paths public static string CombinePaths(string srcPath, params string[] additionalPaths) Parameters srcPath string Start path additionalPaths string[] Additional path parts Returns string Combined path Remarks This method works with relative path, including moving the upper folders via .. GetRelativePath(string, string) Finds the relative path public static string GetRelativePath(string thisPath, string relativeToDir) Parameters thisPath string Path to get relative path for relativeToDir string Relative directory Returns string Relative path Exceptions Exception GetTopFolders(IEnumerable<string>) Excludes all sub level folders and only returns top level folders public static string[] GetTopFolders(IEnumerable<string> paths) Parameters paths IEnumerable<string> Input directory paths Returns string[] Top level folders paths IsInDirectory(string, string) Checks if the specified path is in the other directory public static bool IsInDirectory(string thisPath, string parentDir) Parameters thisPath string Path to check parentDir string Directory to check agains Returns bool True of directory is within another directory ReplaceIllegalRelativePathCharacters(string, Func<char, char>) Replaces illegal characters in the relative file path (rooted path is not supported) public static string ReplaceIllegalRelativePathCharacters(string path, Func<char, char> replacer) Parameters path string Input path replacer Func<char, char> Illegal characters replacer Returns string Legal file path"
  },
  "api/Xarial.XToolkit.Helpers.AssemblyResolver.html": {
    "href": "api/Xarial.XToolkit.Helpers.AssemblyResolver.html",
    "title": "Class AssemblyResolver | SOLIDWORKS PDM SDK",
    "keywords": "Class AssemblyResolver Namespace Xarial.XToolkit.Helpers Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll This is a helper class allowing to specify strategies for resolving the missing dlls public class AssemblyResolver : IDisposable Inheritance object AssemblyResolver Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors AssemblyResolver(AppDomain) Default constructor public AssemblyResolver(AppDomain appDomain) Parameters appDomain AppDomain Application domain AssemblyResolver(AppDomain, string) Constructor with app domain and log name public AssemblyResolver(AppDomain appDomain, string logName) Parameters appDomain AppDomain Application domain logName string Log name Methods Dispose() public void Dispose() RegisterAssemblyReferenceResolver(IReferenceResolver) Addes the resolver service public void RegisterAssemblyReferenceResolver(IReferenceResolver resolver) Parameters resolver IReferenceResolver Resolver service"
  },
  "api/Xarial.XToolkit.Helpers.IReferenceResolver.html": {
    "href": "api/Xarial.XToolkit.Helpers.IReferenceResolver.html",
    "title": "Interface IReferenceResolver | SOLIDWORKS PDM SDK",
    "keywords": "Interface IReferenceResolver Namespace Xarial.XToolkit.Helpers Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Service to resolve the missing assembly references use in the AssemblyResolver public interface IReferenceResolver Properties Name Name of the resolver string Name { get; } Property Value string Methods Resolve(AppDomain, AssemblyName, Assembly) Resolves the missing assembly reference Assembly Resolve(AppDomain appDomain, AssemblyName assmName, Assembly requestingAssembly) Parameters appDomain AppDomain Application domain assmName AssemblyName Assembly name to resolve requestingAssembly Assembly Assembly which requests the missing reference Returns Assembly Replacement assembly"
  },
  "api/Xarial.XToolkit.Helpers.html": {
    "href": "api/Xarial.XToolkit.Helpers.html",
    "title": "Namespace Xarial.XToolkit.Helpers | SOLIDWORKS PDM SDK",
    "keywords": "Namespace Xarial.XToolkit.Helpers Classes AssemblyResolver This is a helper class allowing to specify strategies for resolving the missing dlls Interfaces IReferenceResolver Service to resolve the missing assembly references use in the AssemblyResolver"
  },
  "api/Xarial.XToolkit.Reflection.AppConfigBindingRedirectReferenceResolver.html": {
    "href": "api/Xarial.XToolkit.Reflection.AppConfigBindingRedirectReferenceResolver.html",
    "title": "Class AppConfigBindingRedirectReferenceResolver | SOLIDWORKS PDM SDK",
    "keywords": "Class AppConfigBindingRedirectReferenceResolver Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Resolver for AssemblyResolver allowing to redirect assembly binding based on the .config files public class AppConfigBindingRedirectReferenceResolver : AssemblyNameReferenceResolver, IReferenceResolver Inheritance object AssemblyNameReferenceResolver AppConfigBindingRedirectReferenceResolver Implements IReferenceResolver Inherited Members AssemblyNameReferenceResolver.Name AssemblyNameReferenceResolver.Resolve(AppDomain, AssemblyName, Assembly) AssemblyNameReferenceResolver.ShouldResolve(AppDomain, AssemblyName, Assembly) AssemblyNameReferenceResolver.LoadAssembly(AssemblyNameReferenceResolver.AssemblyInfo) AssemblyNameReferenceResolver.GetCulture(AssemblyName) AssemblyNameReferenceResolver.GetPublicKeyToken(AssemblyName) AssemblyNameReferenceResolver.Match(AssemblyName, AssemblyName) AssemblyNameReferenceResolver.ResolveAmbiguity(IReadOnlyList<AssemblyNameReferenceResolver.AssemblyInfo>, AssemblyName) AssemblyNameReferenceResolver.ProvideProbeAssemblyFilePaths(string, AssemblyName) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This resolver can be useful for the plugin applications (.dlls) when the app.config files will not be considered for binding redirects It can also be useful when the binding redirects specified in the separate file which is not named after the application name (e.g. custom binding redirect without an automatic option) Constructors AppConfigBindingRedirectReferenceResolver() public AppConfigBindingRedirectReferenceResolver() AppConfigBindingRedirectReferenceResolver(string, string[]) public AppConfigBindingRedirectReferenceResolver(string name, string[] filterDirs = null) Parameters name string filterDirs string[] Methods GetAppConfigs(Assembly) protected virtual string[] GetAppConfigs(Assembly requestingAssembly) Parameters requestingAssembly Assembly Returns string[] GetReplacementAssemblyName(AssemblyName, Assembly, out string, out bool) Provides the name of the assembly to replace for this missing reference protected override AssemblyName GetReplacementAssemblyName(AssemblyName assmName, Assembly requestingAssembly, out string searchDir, out bool recursiveSearch) Parameters assmName AssemblyName Missing assembly name requestingAssembly Assembly Assembly that requests this missing reference searchDir string Search directory recursiveSearch bool True to search in sub-directories recursievely Returns AssemblyName Assemly to replace GetRequestingAssemblies(Assembly) protected virtual Assembly[] GetRequestingAssemblies(Assembly requestingAssembly) Parameters requestingAssembly Assembly Returns Assembly[]"
  },
  "api/Xarial.XToolkit.Reflection.AppDomainExtension.html": {
    "href": "api/Xarial.XToolkit.Reflection.AppDomainExtension.html",
    "title": "Class AppDomainExtension | SOLIDWORKS PDM SDK",
    "keywords": "Class AppDomainExtension Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public static class AppDomainExtension Inheritance object AppDomainExtension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterGlobalAssemblyReferenceResolver(AppDomain, IReferenceResolver) public static void RegisterGlobalAssemblyReferenceResolver(this AppDomain appDomain, IReferenceResolver resolver) Parameters appDomain AppDomain resolver IReferenceResolver"
  },
  "api/Xarial.XToolkit.Reflection.AssemblyExtension.html": {
    "href": "api/Xarial.XToolkit.Reflection.AssemblyExtension.html",
    "title": "Class AssemblyExtension | SOLIDWORKS PDM SDK",
    "keywords": "Class AssemblyExtension Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public static class AssemblyExtension Inheritance object AssemblyExtension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods TryGetAttribute<TAtt>(Assembly, out TAtt) public static bool TryGetAttribute<TAtt>(this Assembly assm, out TAtt att) where TAtt : Attribute Parameters assm Assembly att TAtt Returns bool Type Parameters TAtt WithAttribute<TAtt>(Assembly, Action<TAtt>) public static void WithAttribute<TAtt>(this Assembly assm, Action<TAtt> action) where TAtt : Attribute Parameters assm Assembly action Action<TAtt> Type Parameters TAtt"
  },
  "api/Xarial.XToolkit.Reflection.AssemblyMatchFilter_e.html": {
    "href": "api/Xarial.XToolkit.Reflection.AssemblyMatchFilter_e.html",
    "title": "Enum AssemblyMatchFilter_e | SOLIDWORKS PDM SDK",
    "keywords": "Enum AssemblyMatchFilter_e Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll [Flags] public enum AssemblyMatchFilter_e Extension Methods EnumExtension.TryGetAttribute<TAtt>(Enum, Action<TAtt>) Fields Culture = 2 PublicKeyToken = 1 Version = 4"
  },
  "api/Xarial.XToolkit.Reflection.AssemblyNameReferenceResolver.AssemblyInfo.html": {
    "href": "api/Xarial.XToolkit.Reflection.AssemblyNameReferenceResolver.AssemblyInfo.html",
    "title": "Class AssemblyNameReferenceResolver.AssemblyInfo | SOLIDWORKS PDM SDK",
    "keywords": "Class AssemblyNameReferenceResolver.AssemblyInfo Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Assembly information public class AssemblyNameReferenceResolver.AssemblyInfo Inheritance object AssemblyNameReferenceResolver.AssemblyInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties FilePath File path to the assembly public string FilePath { get; } Property Value string Name Assembly name public AssemblyName Name { get; } Property Value AssemblyName"
  },
  "api/Xarial.XToolkit.Reflection.AssemblyNameReferenceResolver.html": {
    "href": "api/Xarial.XToolkit.Reflection.AssemblyNameReferenceResolver.html",
    "title": "Class AssemblyNameReferenceResolver | SOLIDWORKS PDM SDK",
    "keywords": "Class AssemblyNameReferenceResolver Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Default assembly name resolver public abstract class AssemblyNameReferenceResolver : IReferenceResolver Inheritance object AssemblyNameReferenceResolver Implements IReferenceResolver Derived AppConfigBindingRedirectReferenceResolver LocalFolderReferencesResolver Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors AssemblyNameReferenceResolver(string, string[]) Default constructor public AssemblyNameReferenceResolver(string name, string[] filterDirs = null) Parameters name string Name of the resolver filterDirs string[] Only resolve the assembly if requesting assembly is in the specified directories Properties Name Name of the resolver public string Name { get; } Property Value string Remarks Used in the logs Methods GetCulture(AssemblyName) Gets the culture of the assembly name protected string GetCulture(AssemblyName assmName) Parameters assmName AssemblyName Assembly name Returns string Text of the culture GetPublicKeyToken(AssemblyName) Gets the public key token from the assembly name protected string GetPublicKeyToken(AssemblyName assmName) Parameters assmName AssemblyName Assembly name Returns string Text version of public key token GetReplacementAssemblyName(AssemblyName, Assembly, out string, out bool) Provides the name of the assembly to replace for this missing reference protected abstract AssemblyName GetReplacementAssemblyName(AssemblyName assmName, Assembly requestingAssembly, out string searchDir, out bool recursiveSearch) Parameters assmName AssemblyName Missing assembly name requestingAssembly Assembly Assembly that requests this missing reference searchDir string Search directory recursiveSearch bool True to search in sub-directories recursievely Returns AssemblyName Assemly to replace LoadAssembly(AssemblyInfo) Load the assembly protected Assembly LoadAssembly(AssemblyNameReferenceResolver.AssemblyInfo assmInfo) Parameters assmInfo AssemblyNameReferenceResolver.AssemblyInfo Assembly information Returns Assembly Loaded assembly Match(AssemblyName, AssemblyName) Compares two assemblies to see if those match protected virtual bool Match(AssemblyName probeAssmName, AssemblyName searchAssmName) Parameters probeAssmName AssemblyName Assembly candidate searchAssmName AssemblyName Target assembly Returns bool True if assembly names are matching Remarks Use this method to override logic for matching (e.g. full match or only match by file name, version, public key token etc.) ProvideProbeAssemblyFilePaths(string, AssemblyName) Returnes probe assemly file paths protected virtual IEnumerable<string> ProvideProbeAssemblyFilePaths(string dir, AssemblyName searchAssmName) Parameters dir string Directory to search in searchAssmName AssemblyName Target assembly name Returns IEnumerable<string> Possible file paths of the assembly file Resolve(AppDomain, AssemblyName, Assembly) Resolves the missing assembly reference public virtual Assembly Resolve(AppDomain appDomain, AssemblyName assmName, Assembly requestingAssembly) Parameters appDomain AppDomain Application domain assmName AssemblyName Assembly name to resolve requestingAssembly Assembly Assembly which requests the missing reference Returns Assembly Replacement assembly ResolveAmbiguity(IReadOnlyList<AssemblyInfo>, AssemblyName) Provides the assembly to use if multiple options available protected virtual AssemblyNameReferenceResolver.AssemblyInfo ResolveAmbiguity(IReadOnlyList<AssemblyNameReferenceResolver.AssemblyInfo> assmNames, AssemblyName searchAssmName) Parameters assmNames IReadOnlyList<AssemblyNameReferenceResolver.AssemblyInfo> Assembly candidates searchAssmName AssemblyName Target assembly name Returns AssemblyNameReferenceResolver.AssemblyInfo Assembly to use ShouldResolve(AppDomain, AssemblyName, Assembly) Checks if assembly should be resolved by this resolver protected virtual bool ShouldResolve(AppDomain appDomain, AssemblyName assmName, Assembly requestingAssembly) Parameters appDomain AppDomain App Domain assmName AssemblyName Assembly to resolve requestingAssembly Assembly Requesting assembly Returns bool"
  },
  "api/Xarial.XToolkit.Reflection.AssemblyReferenceResolver.html": {
    "href": "api/Xarial.XToolkit.Reflection.AssemblyReferenceResolver.html",
    "title": "Class AssemblyReferenceResolver | SOLIDWORKS PDM SDK",
    "keywords": "Class AssemblyReferenceResolver Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Simple resolve for the assembly references public class AssemblyReferenceResolver : IDisposable Inheritance object AssemblyReferenceResolver Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Resolver will consider the following rules to load missing references 1 - Loading local references only (if requesting assembly is in the working directory) 2 - Loading target or newer version 3 - Loading from work directory and sub-directories 4 - Loading matched name, public key and culture 5 - Loading nearest available version Constructors AssemblyReferenceResolver(AppDomain, string, string) Starts monitoring and loading missin assemblies public AssemblyReferenceResolver(AppDomain appDomain, string workDir, string logName) Parameters appDomain AppDomain Application domain workDir string Working directories to look for the assmebly to load logName string Name of the trace log Methods Dispose() public void Dispose()"
  },
  "api/Xarial.XToolkit.Reflection.EnumExtension.html": {
    "href": "api/Xarial.XToolkit.Reflection.EnumExtension.html",
    "title": "Class EnumExtension | SOLIDWORKS PDM SDK",
    "keywords": "Class EnumExtension Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public static class EnumExtension Inheritance object EnumExtension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods TryGetAttribute<TAtt>(Enum, Action<TAtt>) public static bool TryGetAttribute<TAtt>(this Enum enumer, Action<TAtt> attProc) where TAtt : Attribute Parameters enumer Enum attProc Action<TAtt> Returns bool Type Parameters TAtt"
  },
  "api/Xarial.XToolkit.Reflection.Lambda.html": {
    "href": "api/Xarial.XToolkit.Reflection.Lambda.html",
    "title": "Class Lambda | SOLIDWORKS PDM SDK",
    "keywords": "Class Lambda Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public static class Lambda Inheritance object Lambda Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods InvokeGenericMethod(Expression<Action>, params Type[]) Invokes generic method by supplying the type arguments public static object InvokeGenericMethod(Expression<Action> method, params Type[] typeArguments) Parameters method Expression<Action> Method body to invoke typeArguments Type[] Type arguments Returns object Remarks Method body within expression must only contain constant values or variables (no expression). Use cast to match the parameter type (actual cast wil lnot be called) Exceptions NotSupportedException"
  },
  "api/Xarial.XToolkit.Reflection.LocalFolderReferencesResolver.html": {
    "href": "api/Xarial.XToolkit.Reflection.LocalFolderReferencesResolver.html",
    "title": "Class LocalFolderReferencesResolver | SOLIDWORKS PDM SDK",
    "keywords": "Class LocalFolderReferencesResolver Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public class LocalFolderReferencesResolver : AssemblyNameReferenceResolver, IReferenceResolver Inheritance object AssemblyNameReferenceResolver LocalFolderReferencesResolver Implements IReferenceResolver Inherited Members AssemblyNameReferenceResolver.Name AssemblyNameReferenceResolver.Resolve(AppDomain, AssemblyName, Assembly) AssemblyNameReferenceResolver.ShouldResolve(AppDomain, AssemblyName, Assembly) AssemblyNameReferenceResolver.LoadAssembly(AssemblyNameReferenceResolver.AssemblyInfo) AssemblyNameReferenceResolver.GetCulture(AssemblyName) AssemblyNameReferenceResolver.GetPublicKeyToken(AssemblyName) AssemblyNameReferenceResolver.ResolveAmbiguity(IReadOnlyList<AssemblyNameReferenceResolver.AssemblyInfo>, AssemblyName) AssemblyNameReferenceResolver.ProvideProbeAssemblyFilePaths(string, AssemblyName) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors LocalFolderReferencesResolver(string, AssemblyMatchFilter_e, string, string[], string[]) public LocalFolderReferencesResolver(string searchDir, AssemblyMatchFilter_e matchFilter = AssemblyMatchFilter_e.PublicKeyToken | AssemblyMatchFilter_e.Culture, string name = \"\", string[] assemblyNameFilters = null, string[] filterDirs = null) Parameters searchDir string matchFilter AssemblyMatchFilter_e name string assemblyNameFilters string[] filterDirs string[] Methods GetReplacementAssemblyName(AssemblyName, Assembly, out string, out bool) Provides the name of the assembly to replace for this missing reference protected override AssemblyName GetReplacementAssemblyName(AssemblyName assmName, Assembly requestingAssembly, out string searchDir, out bool recursiveSearch) Parameters assmName AssemblyName Missing assembly name requestingAssembly Assembly Assembly that requests this missing reference searchDir string Search directory recursiveSearch bool True to search in sub-directories recursievely Returns AssemblyName Assemly to replace Match(AssemblyName, AssemblyName) Compares two assemblies to see if those match protected override bool Match(AssemblyName probeAssmName, AssemblyName searchAssmName) Parameters probeAssmName AssemblyName Assembly candidate searchAssmName AssemblyName Target assembly Returns bool True if assembly names are matching Remarks Use this method to override logic for matching (e.g. full match or only match by file name, version, public key token etc.)"
  },
  "api/Xarial.XToolkit.Reflection.ResourceHelper.html": {
    "href": "api/Xarial.XToolkit.Reflection.ResourceHelper.html",
    "title": "Class ResourceHelper | SOLIDWORKS PDM SDK",
    "keywords": "Class ResourceHelper Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public static class ResourceHelper Inheritance object ResourceHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetResource<T>(Type, string) public static T GetResource<T>(Type resType, string resName) Parameters resType Type resName string Returns T Type Parameters T GetValue(object, Type, string[]) public static object GetValue(object obj, Type type, string[] prpsPath) Parameters obj object type Type prpsPath string[] Returns object"
  },
  "api/Xarial.XToolkit.Reflection.TypeExtension.MissingMethodInfo.html": {
    "href": "api/Xarial.XToolkit.Reflection.TypeExtension.MissingMethodInfo.html",
    "title": "Class TypeExtension.MissingMethodInfo | SOLIDWORKS PDM SDK",
    "keywords": "Class TypeExtension.MissingMethodInfo Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public class TypeExtension.MissingMethodInfo : MethodInfo, ICustomAttributeProvider, _MemberInfo, _MethodBase, _MethodInfo Inheritance object MemberInfo MethodBase MethodInfo TypeExtension.MissingMethodInfo Implements ICustomAttributeProvider _MemberInfo _MethodBase _MethodInfo Inherited Members MethodInfo.Equals(object) MethodInfo.GetHashCode() MethodInfo.GetGenericArguments() MethodInfo.GetGenericMethodDefinition() MethodInfo.MakeGenericMethod(params Type[]) MethodInfo.CreateDelegate(Type) MethodInfo.CreateDelegate(Type, object) MethodInfo.MemberType MethodInfo.ReturnType MethodInfo.ReturnParameter MethodBase.GetMethodFromHandle(RuntimeMethodHandle) MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle) MethodBase.GetCurrentMethod() MethodBase.Invoke(object, object[]) MethodBase.GetMethodBody() MethodBase.MethodImplementationFlags MethodBase.CallingConvention MethodBase.IsGenericMethodDefinition MethodBase.ContainsGenericParameters MethodBase.IsGenericMethod MethodBase.IsSecurityCritical MethodBase.IsSecuritySafeCritical MethodBase.IsSecurityTransparent MethodBase.IsPublic MethodBase.IsPrivate MethodBase.IsFamily MethodBase.IsAssembly MethodBase.IsFamilyAndAssembly MethodBase.IsFamilyOrAssembly MethodBase.IsStatic MethodBase.IsFinal MethodBase.IsVirtual MethodBase.IsHideBySig MethodBase.IsAbstract MethodBase.IsSpecialName MethodBase.IsConstructor MemberInfo.GetCustomAttributesData() MemberInfo.CustomAttributes MemberInfo.MetadataToken MemberInfo.Module object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Properties Attributes public override MethodAttributes Attributes { get; } Property Value MethodAttributes DeclaringType public override Type DeclaringType { get; } Property Value Type MethodHandle public override RuntimeMethodHandle MethodHandle { get; } Property Value RuntimeMethodHandle Name public override string Name { get; } Property Value string ReflectedType public override Type ReflectedType { get; } Property Value Type ReturnTypeCustomAttributes public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } Property Value ICustomAttributeProvider Methods GetBaseDefinition() public override MethodInfo GetBaseDefinition() Returns MethodInfo GetCustomAttributes(bool) public override object[] GetCustomAttributes(bool inherit) Parameters inherit bool Returns object[] GetCustomAttributes(Type, bool) public override object[] GetCustomAttributes(Type attributeType, bool inherit) Parameters attributeType Type inherit bool Returns object[] GetMethodImplementationFlags() public override MethodImplAttributes GetMethodImplementationFlags() Returns MethodImplAttributes GetParameters() public override ParameterInfo[] GetParameters() Returns ParameterInfo[] Invoke(object, BindingFlags, Binder, object[], CultureInfo) public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) Parameters obj object invokeAttr BindingFlags binder Binder parameters object[] culture CultureInfo Returns object IsDefined(Type, bool) public override bool IsDefined(Type attributeType, bool inherit) Parameters attributeType Type inherit bool Returns bool"
  },
  "api/Xarial.XToolkit.Reflection.TypeExtension.html": {
    "href": "api/Xarial.XToolkit.Reflection.TypeExtension.html",
    "title": "Class TypeExtension | SOLIDWORKS PDM SDK",
    "keywords": "Class TypeExtension Namespace Xarial.XToolkit.Reflection Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll public static class TypeExtension Inheritance object TypeExtension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods FindMethod(Type, string, BindingFlags) public static MethodInfo FindMethod(this Type type, string methodName, BindingFlags flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic) Parameters type Type methodName string flags BindingFlags Returns MethodInfo GetArgumentsOfGenericType(Type, Type) public static Type[] GetArgumentsOfGenericType(this Type thisType, Type genericType) Parameters thisType Type genericType Type Returns Type[] GetEnumFlags(Type) public static Enum[] GetEnumFlags(this Type enumType) Parameters enumType Type Returns Enum[] GetMethodWithGenericParameters(Type, string, Type[], BindingFlags) Finds the method from the type if public static MethodInfo GetMethodWithGenericParameters(this Type type, string name, Type[] paramTypes, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters type Type Type to get method from name string Name of the method paramTypes Type[] Parameter types of the method bindingFlags BindingFlags Binding flags Returns MethodInfo Method or null if not found Remarks This method is similar to GetMethod(string), but allowing to specify the generic types definitions InvokeMethod(object, MethodInfo, params object[]) public static void InvokeMethod(object obj, MethodInfo method, params object[] args) Parameters obj object method MethodInfo args object[] InvokeMethod<TRes>(object, MethodInfo, params object[]) public static TRes InvokeMethod<TRes>(object obj, MethodInfo method, params object[] args) Parameters obj object method MethodInfo args object[] Returns TRes Type Parameters TRes IsAssignableToGenericType(Type, Type) Checks if this type can be assigned to the generic type public static bool IsAssignableToGenericType(this Type thisType, Type genericType) Parameters thisType Type This type genericType Type Generic type Returns bool True if this type can be assigned to generic type TryFindGenericType(Type, Type) public static Type TryFindGenericType(this Type thisType, Type genericType) Parameters thisType Type genericType Type Returns Type TryGetAttribute<TAtt>(Type, out TAtt, bool) public static bool TryGetAttribute<TAtt>(this Type type, out TAtt att, bool searchInParentTypes = false) where TAtt : Attribute Parameters type Type att TAtt searchInParentTypes bool Returns bool Type Parameters TAtt"
  },
  "api/Xarial.XToolkit.Reflection.html": {
    "href": "api/Xarial.XToolkit.Reflection.html",
    "title": "Namespace Xarial.XToolkit.Reflection | SOLIDWORKS PDM SDK",
    "keywords": "Namespace Xarial.XToolkit.Reflection Classes AppConfigBindingRedirectReferenceResolver Resolver for AssemblyResolver allowing to redirect assembly binding based on the .config files AppDomainExtension AssemblyExtension AssemblyNameReferenceResolver Default assembly name resolver AssemblyNameReferenceResolver.AssemblyInfo Assembly information AssemblyReferenceResolver Simple resolve for the assembly references EnumExtension Lambda LocalFolderReferencesResolver ResourceHelper TypeExtension TypeExtension.MissingMethodInfo Enums AssemblyMatchFilter_e"
  },
  "api/Xarial.XToolkit.TextUtils.html": {
    "href": "api/Xarial.XToolkit.TextUtils.html",
    "title": "Class TextUtils | SOLIDWORKS PDM SDK",
    "keywords": "Class TextUtils Namespace Xarial.XToolkit Assembly BlueByte.SOLIDWORKS.PDMProfessional.SDK.dll Provides utilities working with text public static class TextUtils Inheritance object TextUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods MatchesAnyFilter(string, bool, params string[]) Checks if the specified text matches any of the provided filters public static bool MatchesAnyFilter(string text, bool ignoreCase, params string[] filters) Parameters text string Text to match ignoreCase bool Ignore the case filters string[] Filters Returns bool True if any of the fitler match the text Remarks This method supports wildcards *. If no filters specified this method returns true MatchesAnyFilter(string, params string[]) public static bool MatchesAnyFilter(string text, params string[] filters) Parameters text string filters string[] Returns bool"
  },
  "api/Xarial.XToolkit.html": {
    "href": "api/Xarial.XToolkit.html",
    "title": "Namespace Xarial.XToolkit | SOLIDWORKS PDM SDK",
    "keywords": "Namespace Xarial.XToolkit Namespaces Xarial.XToolkit.Helpers Xarial.XToolkit.Reflection Classes FileFilter Represents the file fltering helper class FileSystemUtils TextUtils Provides utilities working with text"
  },
  "docs/TaskDetails.html": {
    "href": "docs/TaskDetails.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "keywords": "Definition The task details hook gets triggered when you right-click on the task in the tasklist and click Details... IEdmTaskInstance object You may need, depending on your OnCmd implementation, to access the task instance. In PDMSDK, use base.Instance to get access to the IEdmTaskInstance object. Creating an EdmTaskPage Tip If your task does not have any data to show after the completion of the task such as logs, you can completely ignore the EdmTaskDetails hook. Consult the Task Sample from the SOLIDWORKS PDM Professional API help to see the default implementation of this hook. We highly recommend you use PDMSDK's because it saves a lot of time. You can add one of many custom tabs. In PDMSDK terminology, we call them task page. A task page is presented by the type EdmTaskPage. You need to be aware of two types: EdmTaskPage: It is a generic wrapper around the WinForms UserControl with built-in support for saving and loading data in the task. The data is serialized and deserialized. The data object must be a serialized class. the EdmTaskPage takes care of creating or loading an instance of your data class as well as saving into the task. Your data object is property called ViewModel in the EdmTaskPage. ITaskPage: An interface that the EdmTaskPage implements. Tip We highly recommend you use the PDMSDK Visual Studio Template because it comes ready with a boilerplate EdmTaskPage item to be added to your project. To add an EdmTaskdetails: Right-click on the Project in the Solution Explorer and click Add New Item... Look for EdmTaskPage, give it a new and click Add. By default, two items are added: The EdmTaskPage and the data object which is called EdmTaskPageViewModel. In the example below, the page is called Messaging. An EdmTaskPage is a WinForms UserControl. You can use the Visual Studio Toolbox to add and remove WinForms controls to and from it. Requirement: In the OnDataLoaded method in the EdmTaskPage, you can bind your the data object properties to the controls in the EdmTaskPage. Adding a new task page In the OnCmd implementation: Create instances of your task pages. Set the Container property in the EdmTaskPage to that of the AddInBase. We're passing the Container from the AddInBase to the EdmTaskPage. Set the Name property of the EdmTaskPage. You can also do this in the constructor. Call the method AddTaskDetailsPage and supply it with your page. Note We do not support adding multipages to the details window. Example C Sharp VB Pages.Messaging taskdetailsMessagingTab = default(Pages.Messaging); public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch (poCmd.meCmdType) { case EdmCmdType.EdmCmd_TaskDetails: { taskdetailsMessagingTab = new Pages.Messaging(); taskdetailsMessagingTab.Container = base.Container; taskdetailsMessagingTab.Name = \"Messaging\"; AddTaskDetailsPage(taskdetailsMessagingTab); } break; case EdmCmdType.EdmCmd_TaskDetails: break; case EdmCmdType.EdmCmd_TaskRun: break; case EdmCmdType.EdmCmd_TaskLaunch: break; case EdmCmdType.EdmCmd_TaskLaunchButton: default: break; } } catch (CancellationException e) { throw; } catch (TaskFailedException e) { throw; } // this is a PDM exception catch (COMException e) { throw; } catch (Exception e) { throw; } } Private taskdetailsMessagingTab As Pages.Messaging = Nothing Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_Taskdetails taskdetailsMessagingTab = New Pages.Messaging() taskdetailsMessagingTab.Container = MyBase.Container taskdetailsMessagingTab.Name = \"Messaging\" AddTaskdetailsPage(taskdetailsMessagingTab) Case EdmCmdType.EdmCmd_TaskRun ' Implement task run logic here Case EdmCmdType.EdmCmd_TaskLaunch ' Implement task launch logic here Case EdmCmdType.EdmCmd_TaskLaunchButton ' Implement task launch button logic here Case Else ' Default case logic End Select Catch e As CancellationException Throw Catch e As TaskFailedException Throw ' This is a PDM exception Catch e As COMException Throw Catch e As Exception Throw End Try End Sub Debugging Important You cannot debug task details pages with Debug Add-ins... Make sure you have a fresh connection to PDM. Generally speaking, this is done by killing Conisioadmin.exe, edmserver.exe and explorer.exe and then restarting explorer.exe. This process can be done from the Windows task manager. Call AttachDebugger in your OnCmd. Compile code. Add the project files to your vault from the administration tool. Right-click on Add-ins and click New Add-in... Accept all dialogs. Right-click on Tasks and click New... Choose the add-in that you just added from the dropdown. AttachDebugger will be called immediately and you can attach Visual Studio to start debugging through your code. Tip You can use the directives #if DEBUG #endif to conditionally compile the AttachDebugger in the debug configuration. This will ignore it in the Release configuration which you can use in production. Be aware that release configurations do not automatically generate pdb files so your stack traces will not print in your error or logs."
  },
  "docs/TaskLaunch.html": {
    "href": "docs/TaskLaunch.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "keywords": "Definition The task launch hook gets triggered when your task by launched. A task can be launched by one computer and executed (ran) on another one. It is very common for the executing computer to be the PDM server. Almost all of your task implementation in the OnCmd method will be handled by the TaskRun hook. Note Use TaskLaunch to show any necessary UI to get the user input. IEdmTaskInstance object You may need, depending on your OnCmd implementation, to access the task instance. In PDMSDK, use Instance to get access to the IEdmTaskInstance object. This property returns a value in TaskLaunch, launch and, Details. Cancellation and suspension You cannot suspend a task during its launch. You are able to cancel the task by means setting the mpoCancel field on the EdmCmd parameter just like you would do with any hook. Transfering data from task launch to task run Important It is critical to understand that your add-in will invoked by two different processes one during TaskLaunch and one during TaskRun. Every process will have its own ID. When a task a launched, it is launched with TaskLauncher.exe and when it is run, it runs in the TaskExecuter.exe process. You can find out more about these processes by using the AttachDebugger method. This leaves data transfer from TaskLaunch to TaskRun only possible via the GetVarEx and SetVarEx methods part of the IEdmTaskInstance interface. Getting saved data To get access to the data you have saved in the task setup, call the method GetSettings where T is the view model type. Example: C Sharp VB var messagingViewModel = base.GetSettings<MessagingViewModel>(); Dim messagingViewModel As MessagingViewModel = MyBase.GetSettings(Of MessagingViewModel)()"
  },
  "docs/TaskRun.html": {
    "href": "docs/TaskRun.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "keywords": "Definition The task run hook gets triggered when your task gets transfered from the launch machine to the run. A task can be launched by one computer and executed (ran) on another one. It is very common for the executing computer to be the PDM server. Almost all of your task implementation in the OnCmd method will be handled by the TaskRun hook. IEdmTaskInstance object You may need, depending on your OnCmd implementation, to access the task instance. In PDMSDK, use Instance to get access to the IEdmTaskInstance object. This property returns a value in TaskLaunch, Run and, Details. Updating the progressbar To update the progress bar in the tasklist use these two methods. SetRange UpdateTaskMessage Warning UpdateTaskMessage will throw an exception if the provided position is out of bounds of the specified range. Cancellation and suspension Whenever you want to give your implementation a chance to consider if the user has requested a suspension or a cancellation call UpdateTaskMessage. Warning In case of a cancellation, UpdateTaskMessage will throw a CancellationException that you need to handle. Note UpdateTaskMessage handles cancellation, suspension and update the progressbar and the message in the tasklist. Getting saved data To get access to the data you have saved in the task setup, call the method GetSettings where T is the view model type. Example: C Sharp VB var messagingViewModel = base.GetSettings<MessagingViewModel>(); Dim messagingViewModel As MessagingViewModel = MyBase.GetSettings(Of MessagingViewModel)()"
  },
  "docs/TaskSetup.html": {
    "href": "docs/TaskSetup.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "keywords": "Definition The task setup hook gets triggered when you select the add-in from the dropdown in the task dialog or you edit an add-in's task. The task setup hook allows you to load and save data into the task. It also gives the ability to add custom tabs to the task setup dialog. This tabs are WinForms UserControls. IEdmTaskProperties object You may need, depending on your OnCmd implementation, to access the task properties. In PDMSDK, use base.Properties to get access to the IEdmTaskProperties property. This property returns null or nothing in hooks other than EdmTaskSetup and EdmTaskSetupButton. Creating an EdmTaskPage Tip If your task does not have any settings, you can completely ignore the EdmTaskSetup hook. There is no need to store data in the task. Consult the Task Sample from the SOLIDWORKS PDM Professional API help to see the default implementation of this hook. We highly recommend you use PDMSDK's because it saves a lot of time. You can add one of many custom tabs. In PDMSDK terminology, we call them task page. A task page is presented by the type EdmTaskPage. You need to be aware of two types: EdmTaskPage: It is a generic wrapper around the WinForms UserControl with built-in support for saving and loading data in the task. The data is serialized and deserialized. The data object must be a serialized class. the EdmTaskPage takes care of creating or loading an instance of your data class as well as saving into the task. Your data object is property called ViewModel in the EdmTaskPage. ITaskPage: An interface that the EdmTaskPage implements. Tip We highly recommend you use the PDMSDK Visual Studio Template because it comes ready with a boilerplate EdmTaskPage item to be added to your project. To add an EdmTaskSetup: Right-click on the Project in the Solution Explorer and click Add New Item... Look for EdmTaskPage, give it a new and click Add. By default, two items are added: The EdmTaskPage and the data object which is called EdmTaskPageViewModel. In the example below, the page is called Messaging. An EdmTaskPage is a WinForms UserControl. You can use the Visual Studio Toolbox to add and remove WinForms controls to and from it. Requirement: In the OnDataLoaded method in the EdmTaskPage, you can bind your the data object properties to the controls in the EdmTaskPage. Adding a new task page In the OnCmd implementation: Create instances of your task pages. Set the Container property in the EdmTaskPage to that of the AddInBase. We're passing the Container from the AddInBase to the EdmTaskPage. Set the Name property of the EdmTaskPage. You can also do this in the constructor. Call the method AddTaskSetupPages and supply it with an array of your task pages. Saving task page's data Warning You must reuse the same instance from the TaskSetup hook. Call the method StoreData in your EdmTaskPage. You may also call AddContextMenu to add a right-click that triggers the task launch from File Explorer if the task flags allow that. See the complete code example below. Example C Sharp VB Pages.Messaging taskSetupMessagingTab = default(Pages.Messaging); public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch (poCmd.meCmdType) { case EdmCmdType.EdmCmd_TaskSetup: { taskSetupMessagingTab = new Pages.Messaging(); taskSetupMessagingTab.Name = \"Messaging\"; taskSetupMessagingTab.Container = base.Container; AddTaskSetupPage(taskSetupMessagingTab); // or if you have multiple pages // AddTaskSetupPages(new BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage[] { taskSetupMessagingTab}); } break; case EdmCmdType.EdmCmd_TaskSetupButton: { // add a context menu AddContextMenu($\"Tasks\\\\{Properties.TaskName} [V{Identity.Version}]\", Identity.Description); // save the data of the tab taskSetupMessagingTab.StoreData(ref poCmd); } break; case EdmCmdType.EdmCmd_TaskDetails: break; case EdmCmdType.EdmCmd_TaskRun: break; case EdmCmdType.EdmCmd_TaskLaunch: break; case EdmCmdType.EdmCmd_TaskLaunchButton: default: break; } } catch (CancellationException e) { throw; } catch (TaskFailedException e) { throw; } // this is a PDM exception catch (COMException e) { throw; } catch (Exception e) { throw; } } Private taskSetupMessagingTab As Pages.Messaging = Nothing Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_TaskSetup taskSetupMessagingTab = New Pages.Messaging() taskSetupMessagingTab.Name = \"Messaging\" taskSetupMessagingTab.Container = MyBase.Container AddTaskSetupPage(taskSetupMessagingTab) ' Or if you have multiple pages ' AddTaskSetupPages(New BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage() {taskSetupMessagingTab}) Case EdmCmdType.EdmCmd_TaskSetupButton ' Add a context menu AddContextMenu($\"Tasks\\{Properties.TaskName} [V{Identity.Version}]\", Identity.Description) ' Save the data of the tab taskSetupMessagingTab.StoreData(poCmd) Case EdmCmdType.EdmCmd_TaskDetails ' Implement task details logic here Case EdmCmdType.EdmCmd_TaskRun ' Implement task run logic here Case EdmCmdType.EdmCmd_TaskLaunch ' Implement task launch logic here Case EdmCmdType.EdmCmd_TaskLaunchButton ' Implement task launch button logic here Case Else ' Default case logic End Select Catch e As CancellationException Throw Catch e As TaskFailedException Throw ' This is a PDM exception Catch e As COMException Throw Catch e As Exception Throw End Try End Sub Debugging Important You cannot debug task setup pages with Debug Add-ins... Make sure you have a fresh connection to PDM. Generally speaking, this is done by killing Conisioadmin.exe, edmserver.exe and explorer.exe and then restarting explorer.exe. This process can be done from the Windows task manager. Call AttachDebugger in your OnCmd. Compile code. Add the project files to your vault from the administration tool. Right-click on Add-ins and click New Add-in... Accept all dialogs. Right-click on Tasks and click New... Choose the add-in that you just added from the dropdown. AttachDebugger will be called immediately and you can attach Visual Studio to start debugging through your code. Tip You can use the directives #if DEBUG #endif to conditionally compile the AttachDebugger in the debug configuration. This will ignore it in the Release configuration which you can use in production. Be aware that release configurations do not automatically generate pdb files so your stack traces will not print in your error or logs."
  },
  "docs/TaskSetupButton.html": {
    "href": "docs/TaskSetupButton.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "keywords": "Definition The task setup button hook gets triggered when you click on the OK or Cancel button in the following window. The task setup hook allows you to save data into the task. It also gives the ability add context menu if your task defines that in task flags. Saving task page's data Warning You must reuse the same instance from the TaskSetup hook. Call the method StoreData in your EdmTaskPage. You may also call AddContextMenu to add a right-click that triggers the task launch from File Explorer. See the complete code example below. Example C Sharp VB Pages.Messaging taskSetupMessagingTab = default(Pages.Messaging); public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch (poCmd.meCmdType) { case EdmCmdType.EdmCmd_TaskSetup: { taskSetupMessagingTab = new Pages.Messaging(); taskSetupMessagingTab.Container = base.Container; AddTaskSetupPage(taskSetupMessagingTab); // or if you have multiple pages // AddTaskSetupPages(new BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage[] { taskSetupMessagingTab}); } break; case EdmCmdType.EdmCmd_TaskSetupButton: { // add a context menu AddContextMenu($\"Tasks\\\\{Properties.TaskName} [V{Identity.Version}]\", Identity.Description); // save the data of the tab taskSetupMessagingTab.StoreData(ref poCmd); } break; case EdmCmdType.EdmCmd_TaskDetails: break; case EdmCmdType.EdmCmd_TaskRun: break; case EdmCmdType.EdmCmd_TaskLaunch: break; case EdmCmdType.EdmCmd_TaskLaunchButton: default: break; } } catch (CancellationException e) { throw; } catch (TaskFailedException e) { throw; } // this is a PDM exception catch (COMException e) { throw; } catch (Exception e) { throw; } } Private taskSetupMessagingTab As Pages.Messaging = Nothing Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_TaskSetup taskSetupMessagingTab = New Pages.Messaging() taskSetupMessagingTab.Container = MyBase.Container AddTaskSetupPage(taskSetupMessagingTab) ' Or if you have multiple pages ' AddTaskSetupPages(New BlueByte.SOLIDWORKS.PDMProfessional.SDK.Core.ITaskPage() {taskSetupMessagingTab}) Case EdmCmdType.EdmCmd_TaskSetupButton ' Add a context menu AddContextMenu($\"Tasks\\{Properties.TaskName} [V{Identity.Version}]\", Identity.Description) ' Save the data of the tab taskSetupMessagingTab.StoreData(poCmd) Case EdmCmdType.EdmCmd_TaskDetails ' Implement task details logic here Case EdmCmdType.EdmCmd_TaskRun ' Implement task run logic here Case EdmCmdType.EdmCmd_TaskLaunch ' Implement task launch logic here Case EdmCmdType.EdmCmd_TaskLaunchButton ' Implement task launch button logic here Case Else ' Default case logic End Select Catch e As CancellationException Throw Catch e As TaskFailedException Throw ' This is a PDM exception Catch e As COMException Throw Catch e As Exception Throw End Try End Sub Debugging Important You cannot debug task setup pages with Debug Add-ins... Make sure you have a fresh connection to PDM. Generally speaking, this is done by killing Conisioadmin.exe, edmserver.exe and explorer.exe and then restarting explorer.exe. This process can be done from the Windows task manager. Call AttachDebugger in your OnCmd. Compile code. Add the project files to your vault from the administration tool. Right-click on Add-ins and click New Add-in... Accept all dialogs. Right-click on Tasks and click New... Choose the add-in that you just added from the dropdown. AttachDebugger will be called immediately and you can attach Visual Studio to start debugging through your code. Tip You can use the directives #if DEBUG #endif to conditionally compile the AttachDebugger in the debug configuration. This will ignore it in the Release configuration which you can use in production. Be aware that release configurations do not automatically generate pdb files so your stack traces will not print in your error or logs."
  },
  "docs/Visual-Studio-SDK-template.html": {
    "href": "docs/Visual-Studio-SDK-template.html",
    "title": "Visual Studio SOLIDWORKS PDM SDK Template | SOLIDWORKS PDM SDK",
    "keywords": "Visual Studio SOLIDWORKS PDM SDK Template The SDK template has the best boilerplate code written and ready for you to edit. Installing Visual Studio SOLIDWORKS PDM SDK Template Tip Always make sure you are using the latest version of the PDM SDK template. To find the latest version of the template, please check the Extensions window in your Visual Studio or follow this link. Tip All Visual Studio editions up to 2022 are supported. To install the Visual Studio SOLIDWORKS PDM SDK Template: Go to https://marketplace.visualstudio.com/items?itemName=BlueByteSystemsInc.ID Click Download In Windows 10 and on some computers, your downloaded files must be unblocked. To do, please right-click on the downloaded file, go to Properties and then check the Unblock checkbox before clicking again on Apply and then OK. Make sure that all instances of Visual Studio are closed. Open the Visual Studio Extension Installer (VSXI) and follow the instructions."
  },
  "docs/addinbase_structure.html": {
    "href": "docs/addinbase_structure.html",
    "title": "AddInBase structure | SOLIDWORKS PDM SDK",
    "keywords": "AddInBase structure Note For the complete API reference of the AddInBase class, please refer to this page. In the SOLIDWORKS PDM API, your add-in's class must implement the IEdmAddIn5 interface. In PDMSDK, AddInBase is the only class that has to be inherited in order to create a working PDM add-in. This abstract class does implement the IEdmAddIn5 interface and packs a lot of useful functionlities. PDM add-ins can be broken down into two different types: Standard add-in Can hook into various PDM events such as check-in/check-out, state changes, adding/deleting files, etc... Task add-in Can be run as current or another specified user Can be run on current PC or another specified PC Can be scheduled to run at a specific time Can be set to execute as part of a document workflow While add-ins follow the simple client-server model, task add-ins are slightly more complex. A PDM workload can distributed to several task machines. The overall archiecture can be described by the following diagram: Tip SOLIDWORKS Corp defines tasks as feature in the administration tool that lets you configure, run, and monitor tasks that you perform frequently on SOLIDWORKS PDM files.. For more information, please visit this page. Definition attributes To configure an add-in and specify its functionality, attributes are used to decorate the class that implements AddInBase. The following attributes define what is shown in the Administration UI Properties of the add-in: [Name(\"Sample PDM Add-In\")] [CompanyName(\"My Company Name\")] [AddInVersion(false, 1)] [RequiredVersion(29, 0)] [Description(\"This is the description of what this add-in will do.\")] Task add-in specific attributes: [IsTask(true)] This defines whether the add-in is a task add in (true) or not (false). [TaskFlags(EdmTaskFlag flag)] These agruments indicate how the add-in can be incorporated into PDM. Note The framework automatically hooks into all task events when [IsTask()] is set to true, no need to use the [ListenFor(EdmCmdType event)] attribute]. Standard add-in attributes: [ListenFor(EdmCmdType event)] tells the add-in which PDM event to hook into. Each time a hooked event is triggered within PDM, it will call OnCmd(). Required Windows attributes: [ComVisible(true)] This allows PDM to see the add-in. [Guid(\"\")] A unique ID generated that is specific to your project. Note In Visual Studio, you can generate a new guid by going to Tools -> Create GUID. Common members Look up the help page for these members using the documentation link above. Property/Method Purpose Logger Returns the ILogger interface. Properties Returns the IEdmProperties object. Be aware that this is only available for EdmTaskSetupButton and EdmTaskSetup hooks. Otherwise, this property will turn null or nothing. Instance Returns the IEdmTaskInstance object. Be aware that this is only available for EdmTaskLaunch, Run and Details hooks. Otherwise, this property will return null or nothing. Identity This structure captures the values used in the definition attributes. Use the method ToCaption() to return the name of the add-in and its version without using string concatenation. This particularly useful for setting the title of a form. Container This dependency injection container will resolve any types that registered in the RegisterAdditionalTypes method. ForEach Provides a mechanism to apply a lambda expression to the affected items. Be aware that this is only valid for files (IEdmFile5). Other items affected by the command that are not files will be ignored. Note AddInBase contains properties and methods that sare pecific to task add-ins and are covered in further details in the next sections. Example C Sharp VB namespace MyPdmAddIn { [Name(\"Sample PDM Add-In\")] [CompanyName(\"My Company Name\")] [AddInVersion(false, 1)] [RequiredVersion(29, 0)] [Description(\"This is the description of what this add-in will do.\")] [IsTask(true)] [TaskFlags((int)EdmTaskFlag.EdmTask_SupportsChangeState + (int)EdmTaskFlag.EdmTask_SupportsDetails + (int)EdmTaskFlag.EdmTask_SupportsInitExec + (int)EdmTaskFlag.EdmTask_SupportsScheduling)] [ComVisible(true)] [Guid(\"0DF94D2F-9FCE-40E2-85E9-CCD5B9DE0DC6\")] public class AddIn : AddInBase { public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); // Add your add-in code here } } } To be provided. // if you see this, please contribute to our repo but providing a translation of C# to VB.NET"
  },
  "docs/adding_logic_oncmd.html": {
    "href": "docs/adding_logic_oncmd.html",
    "title": "Implementing OnCmd | SOLIDWORKS PDM SDK",
    "keywords": "Implementing OnCmd Tip You do not need to be provide an implementation or override the GetAddInInfo method. PDMSDK takes care of setting the add-in information through the definition attributes discussed previously. The OnCmd gets called by PDM whenever a menu command or a hooked event is triggered. There are two arguments passed into this method: EdmCmd poCmd This object contains information about the event that triggered this call as well as attributes for the vault and vault view that triggered the event. Tip For complete information about EdmCmd, refer to this page EdmCmdData[] ppoData This object contains data about every object (file, folder, etc.) that this command will potentially affect. Common attributes that are passed through the EdmCmdData structure are: File path Id of affected file Id of affected folder, or parent folder of file Additional command specific information may be passed into this structure. Tip For complete information about EdmCmdData structure for all command types, refer to this page Working with EdmCmdData A common structure for to utilize OnCmd and its data will be to perform actions based on the command type using a switch statement. The command type is retrieved from poCmd.meCmdType A separate switch case can be added for each command type in order to keep the logic separate. Note To perform actions on a specific command type, that command must first be hooked using the [AddListener()] attribute. See this help page for more information. C Sharp VB public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); switch(poCmd.meCmdType) { case EdmCmdType.EdmCmd_PreUnlock: foreach(var ppoDatum in ppoData) { // Do something to each file before it is checked-in } break; } } Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) MyBase.OnCmd(poCmd, ppoData) Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_PreUnlock For Each ppoDatum In ppoData ' Do something to each file before it is checked-in Next End Select End Sub Tip To access the vault object, utilize this.Vault. If the vault object needs to implement additional features from a specific vault interface, it can be cast in this manner. var edmVault21 = this.Vault as IEdmVault21 Accessing Files and Folders Files and folders can be accessed by utilizing the IDs passed into the ppoData[] structure. The example below obtains the file object from the vault and can perform actions or checks on it prior to it being checked in. C Sharp VB case EdmCmdType.EdmCmd_PreUnlock: foreach (var ppoDatum in ppoData) { var filePath = ppoDatum.mbsStrData1; var fileId = ppoDatum.mlObjectID1; var folderId = ppoDatum.mlObjectID2; var edmFile = Vault.TryGetFileFromPath(filePath, out var edmFolder); // Do something with the file in question } break; Case EdmCmdType.EdmCmd_PreUnlock For Each ppoDatum In ppoData Dim filePath = ppoDatum.mbsStrData1 Dim fileId = ppoDatum.mlObjectID1 Dim folderId = ppoDatum.mlObjectID2 Dim edmFolder As EdmFolder Dim edmFile = Vault.TryGetFileFromPath(filePath, edmFolder) ' Do something with the file in question Next Canceling Actions If the OnCmd function needs to abort the current action, such as check-in or state change, the poCmd.mbCancel flag can be set by the user. Once the add-in finishes with the OnCmd method, it will allow or cancel the current action based on the value of this command. Example to cancel check-in: C Sharp VB case EdmCmdType.EdmCmd_PreUnlock: foreach (var ppoDatum in ppoData) { var filePath = ppoDatum.mbsStrData1; var fileId = ppoDatum.mlObjectID1; var folderId = ppoDatum.mlObjectID2; var edmFile = Vault.TryGetFileFromPath(filePath, out var edmFolder); if (edmFile.CurrentRevision == \"\") // if the revision is not blank, cancel the check-in { poCmd.mbCancel = Convert.ToInt16(true); // Sets to integer value of 1 break; } } break; Case EdmCmdType.EdmCmd_PreUnlock For Each ppoDatum In ppoData Dim filePath = ppoDatum.mbsStrData1 Dim fileId = ppoDatum.mlObjectID1 Dim folderId = ppoDatum.mlObjectID2 Dim edmFile = Vault.TryGetFileFromPath(filePath, edmFolder) If edmFile.CurrentRevision = \"\" Then ' if the revision is not blank, cancel the check-in poCmd.mbCancel = Convert.ToInt16(True) ' Sets to integer value of 1 Exit For End If Next Exit Select Note This cancellation applies to all files in the current command. It is not possible to allow some files to proceed while halting the action on others. Important Tasks support suspension and cancellation during the EdmTaskRun hook. PDMSDK provides a specific way to suspend and cancel tasks. Consult the task section for more information. Exception handling We highly recommend that you wrap your OnCmd implementation in a try catch block. Please catch the following exceptions when working with PDMSDK in this order: TaskFailedException: Thrown when a task fails. CancellationException: Thrown when a task is canceled by the user. COMException: Thrown when PDM (or another third-party application such as SOLIDWORKS ) throws an exception. Exception: To catch any .NET exception. C Sharp VB public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch(poCmd.meCmdType) { case EdmCmdType.EdmCmd_PreUnlock: foreach(var ppoDatum in ppoData) { // Do something to each file before it is checked-in } break; } } catch(TaskFailedException e) { } catch(CancellationException e) { } catch(COMException e) { } catch(Exception e) { } } Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData As EdmCmdData()) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_PreUnlock For Each ppoDatum In ppoData ' Do something to each file before it is checked-in Next End Select Catch e As TaskFailedException Catch e As CancellationException Catch e As COMException Catch e As Exception End Try End Sub"
  },
  "docs/binding.html": {
    "href": "docs/binding.html",
    "title": "Background | SOLIDWORKS PDM SDK",
    "keywords": "Background EdmTaskPage inherits from the WinForms UserControl class. The idea behind using the MVVM architecture is to minimize the amount of codebehind in EdmTaskPages. The EdmTaskPage class contains a property called ViewModel. When you create a EdmTaskPage, you are required to specify the ViewModel's type as part of the generic class definition of the page. C Sharp VB public class myViewModelType : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; public void OnPropertyChanged([CallerMemberName] string propertyName = \"\") { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } public string FileName {get;set;} } public partial class myEdmTaskPage : EdmTaskPage<myViewModelType> { // this line to demo the logic - add controls through the usercontrol designer private System.Windows.Forms.TextBox FileNameTextBox; public myEdmTaskPage() { this.Name = \"myEdmTaskPage\"; InitializeComponent(); } } Imports System.ComponentModel Imports System.Runtime.CompilerServices Imports System.Windows.Forms Public Class myViewModelType Implements INotifyPropertyChanged Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged Protected Sub OnPropertyChanged(<CallerMemberName> Optional propertyName As String = \"\") RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName)) End Sub Private _fileName As String Public Property FileName As String Get Return _fileName End Get Set(value As String) If _fileName <> value Then _fileName = value OnPropertyChanged() End If End Set End Property End Class Public Partial Class myEdmTaskPage Inherits EdmTaskPage(Of myViewModelType) ' This line to demo the logic - add controls through the user control designer Private FileNameTextBox As TextBox Public Sub New() Me.Name = \"myEdmTaskPage\" InitializeComponent() End Sub Private Sub InitializeComponent() Me.FileNameTextBox = New TextBox() ' Additional initialization logic can be added here End Sub End Class Note Your view model type must implemented the .NET Component Model interface INotifyPropertyChanged. How binding works? In the view model, override the method OnDataLoaded. You can provide the binding between the control and the view model property. Example: C Sharp VB public override void OnDataLoaded() { base.OnDataLoaded(); FileNameTextBox.DataBindings.Add(new Binding(\"Text\", ViewModel, nameof(ViewModel.Enabled), false, DataSourceUpdateMode.OnPropertyChanged)); } Public Overrides Sub OnDataLoaded() MyBase.OnDataLoaded() FileNameTextBox.DataBindings.Add(New Binding(\"Text\", ViewModel, NameOf(ViewModel.Enabled), False, DataSourceUpdateMode.OnPropertyChanged)) End Sub All changes in the UI will propagate to the view model and no more code-behind is needed. ViewModel requirements Do not use internal properties. Do not use private setters. Always make sure the view model has a parameterless constructor. Note These requirements are necessary because EdmTaskPage uses Newtonsoft.Json to load and save the view model. How do I save the view model? Call the method StoreData during the TaskSetupButton hook. See full code example in the TaskSetup section."
  },
  "docs/building_project.html": {
    "href": "docs/building_project.html",
    "title": "Building the project | SOLIDWORKS PDM SDK",
    "keywords": "Warning If you are viewing this page directly, we highly recommend you go back to the previous pages in this guide and review any missed steps. Building the project Locate the add-in project in the Solution Explorer and select it. By default, the Debug configuration will be selected. This information will be useful later in locating the output files. Right-click on the project and click Properties. Go the Build tab (for csproj ie: C# users) Check Register for COM interop Right-click on the project in the solution explorer and click Build If the project has built successfully, Visual Studio will print Build succeeded in the lower left side of the window. Note If you are a VB.NET user, the Register for com interop checkbox will be in the Compile tab. Output files Navigate to the bin/debug folder found in the project's folder. To locate the project folder, right-click on the project in the Solution Explorer and click Open Folder in File Explorer. The bin/debug will contain the: the dll of the add-in. the dlls of PDMSDK. Other dependencies you may have installed. Note We did not list the dll names of PDMSDK, because they are subject to change. We're working on reducing the number of dependencies. The most important dll that you will always have is called BlueByte.SOLIDWORKS.PDM.Professional.SDK."
  },
  "docs/commands.html": {
    "href": "docs/commands.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "keywords": "Definition Commands in SOLIDWORKS PDM can be triggered from the toolbar menus, buttons, or the right-click menu. Conventionally, you add commands using the command manager IEdmCmdMgr5 in the GetAddInfo implementation. Commands in PDMSDK Since PDMSDK hides the GetAddInInfo implementation, we use the MenuAttribute to add commands capbilitites to your add-in. To add a command as part of the right-click menu: Start by defining an Enum for your commands. For example // this piece of code defines two commands. Make sure your commands values are unique. public enum Commands_e { Settings = 15615, ProcessFile = 475 } Decorate your add-in class with the MenuAttribute. Example: [Menu((int)Commands_e.ProcessFile, \"MyPDMAddIn\\\\Process File(s)\", 35, \"\",\"\",-1,0)] Tip Use \\\\ in the command caption to create sub menus. See the example above. Tip Please make you read the MenuAttribute constructors paramrters. The flags parameter defines the visibility of the command. The flags are a sum of the EdmMenuFlags enum. For the flags: Use 35 if you want to show the command in the RMB for files with support for single and multi-selection. Use 43 if you want to show the command in the RMB for files with support for single selection only. You can cast the value of EdmMenuFlags into an integer as a flag. For example (int)EdmMenuFlags.EdmMenu_Administration will add the menu to the right-click menu of the add-in the administration tool. Handling PDM events with HandlesAttribute PDMSDK wires your add-in’s event handlers without requiring GetAddInInfo. Use the HandlesAttribute to subscribe to PDM events. HandlesAttribute expects one parameter: EdmCmdType eventName: the PDM event you want to handle (e.g., EdmCmdType.EdmCmd_Menu, EdmCmdType.EdmCmd_PostState). The callback method must take the ref parameters as on the OnCmd method. See examples below: Tip use nameof(YourMethod) for refactor-safe method names. OnCmd Implementation Commands trigger the OnCmd method. Make sure to approprietly check for the invoked command ID with poCmd.meCmdID and the command type with poCmd.meCmdType (In this case, it will EdmCmdType.EdmCmdMenu). Command Visibility With PDMSDK, you restrict commands to be visible to specific users, groups or users with specific permissions. You can do that via the CommandVisibilityAttribute attribute. Decorate your add-in class with the CommandVisibility attribute. The example below shows the settings command only the users with edit addins permission. [CommandVisibility((int)Commands_e.Settings, EdmSysPerm.EdmSysPerm_EditAddins)] Code sample C Sharp VB public enum Commands_e { Settings = 15615, ProcessFile = 475 } [Name(\"MyAddIn\")] [Description(\"MyAddIn Description\")] [CompanyName(\"Blue Byte Systems Inc.\")] [ListenFor(EdmCmdType.EdmCmd_Menu)] [Menu((int)Commands_e.ProcessFile, \"MyAddIn\\\\ProcessFile\", 35, \"\",\"\",-1,0)] [Menu((int)Commands_e.Settings, \"Settings\", (int)EdmMenuFlags.EdmMenu_Administration, \"\",\"\",-1,0)] [CommandVisibility((int)Commands_e.Settings, EdmSysPerm.EdmSysPerm_EditAddins)] [AddInVersion(false, 1)] [IsTask(false)] [RequiredVersion(10, 0)] [ComVisible(true)] [Guid(\"2968ACED-D471-4704-AC44-68B28549F8295\")] public partial class AddIn : AddInBase { public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) { base.OnCmd(ref poCmd, ref ppoData); try { switch(poCmd.meCmdType) { case EdmCmdType.EdmCmd_Menu: if (poCmd.mlCmdID == (int)Commands_e.ProcessFile) { foreach(var ppoDatum in ppoData) { // Do something to each file before it is checked-in } return; } if (poCmd.mlCmdID == (int)Commands_e.Settings) { foreach(var ppoDatum in ppoData) { // show settings } } break; } } catch(TaskFailedException e) { } catch(CancellationException e) { } catch(COMException e) { } catch(Exception e) { } } [Handles(EdmCmdType.EdmCmd_CardButton)] public void CardButton_Click(ref EdmCmd poCmd, ref EdmCmdData[] ppoData){ } } Public Enum Commands_e Settings = 15615 ProcessFile = 475 End Enum <Name(\"MyAddIn\")> <Description(\"MyAddIn Description\")> <CompanyName(\"Blue Byte Systems Inc.\")> <ListenFor(EdmCmdType.EdmCmd_Menu)> <Menu(CType(Commands_e.ProcessFile, Integer), \"MyAddIn\\ProcessFile\", 35, \"\", \"\", -1, 0)> <Menu(CType(Commands_e.Settings, Integer), \"Settings\", CType(EdmMenuFlags.EdmMenu_Administration, Integer), \"\", \"\", -1, 0)> <CommandVisibility(CType(Commands_e.Settings, Integer), EdmSysPerm.EdmSysPerm_EditAddins)> <AddInVersion(False, 1)> <IsTask(False)> <RequiredVersion(10, 0)> <ComVisible(True)> <Guid(\"2968ACED-D471-4704-AC44-68B28549F8295\")> Public Partial Class AddIn Inherits AddInBase Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData As EdmCmdData()) MyBase.OnCmd(poCmd, ppoData) Try Select Case poCmd.meCmdType Case EdmCmdType.EdmCmd_Menu If poCmd.mlCmdID = CInt(Commands_e.ProcessFile) Then For Each ppoDatum In ppoData ' Do something to each file before it is checked-in Next Return End If If poCmd.mlCmdID = CInt(Commands_e.Settings) Then For Each ppoDatum In ppoData ' Show settings Next End If End Select Catch e As TaskFailedException Catch e As CancellationException Catch e As COMException Catch e As Exception End Try End Sub <ListenFor(EdmCmdType.EdmCmd_CardButton)> Public Sub HandlesCardButton_Click(ByRef poCmd As EdmCmd, ByRef ppoData As EdmCmdData()) End Sub End Class"
  },
  "docs/creating_new_project.html": {
    "href": "docs/creating_new_project.html",
    "title": "PDM SDK template | SOLIDWORKS PDM SDK",
    "keywords": "PDM SDK template The PDM SDK Visual Studio project template saves time from having to rewrite the same boilerplate code everytime you write a new add-in. Note The set of instructions below use Visual Studio Community 2019. The same applies for older version of Visual Studio. To create a new add-in project, Open Visual Studio. We recommend you run VS as admin If you do not see the Visual Studio 2019, window Go to File > New Project... Select Create a new project... Configure your project by giving it a name and a location. Click OK. In the next window, search for PDM SDK Add-in Template. Important If you do not find the templates, this means that you were not able to install the PDM SDK Templates properly. Please refer to the previous page for more information. Warning Depending on your version of Visual Studio, you may need to filter the project templates by their programming language. There are two templates, one in C# and one in VB.NET. Choose which ever is best for you. When you choose the template, a PDMSDK specific window appears. Please give the add-in a name and description and complete the other fields. Click OK to create the add-in project. After you have entered the add-in's information and clicked OK, the SDK template will create your add-in files. Your Visual Studio will look something similar to this: Note The swigly lines under the code are there because we have not restored the PDM SDK nuget package yet. This is something that will be done in the next chapter. Note You may notice that the company name has not been ported correctly to AddIn.cs. This is a known issue in the SDK template."
  },
  "docs/debugging_with_sdk.html": {
    "href": "docs/debugging_with_sdk.html",
    "title": "Debugging Add-ins | SOLIDWORKS PDM SDK",
    "keywords": "Debugging Add-ins Add-ins are stored in the file vault and are downloaded to and COM-registered on the client computer when they are needed. This presents a problem when developing a new add-in that you want to debug, because the add-in is re-registered in a folder that is different than the compiler’s output folder. Testing an add-in in a production vault can also be a problem, because it affects all users of the vault. SOLIDWORKS PDM Professional provides a menu command that solves these two problems, Debug Add-ins. When an add-in is installed as a debug add-in, it is registered only on your machine. No other users are affected by it. The add-in is also loaded from the location where it is registered. To debug an add-in using File Explorer: Open the Windows Task Manager. Kill the explorer.exe/edmserver.exe process. Right-click the project name in the Solution Explorer of Visual Studio and click Properties. Click the Debug tab. Click Start external program and type the File Explorer executable's path. For example: C:\\windows\\notepad.exe Click Debug > Start Debugging. Limitations Using notepad.exe as an external program has limitations: Open file dialog has no support for multi-select for files or folders Numerous steps required to be performed each time new debug session is started (i.e. click Open menu, navigate to vault, change filter). You cannot use Debug Add-ins to debug task add-ins. Tip We highly recommend you use our Console Debugger Tool for SOLIDWORKS PDM Professional add-ins. You can download the binaires from our release page in this repo. PDMSDK's AttachDebugger PDMSDK provides you with a built-in method in the base class called AttachDebugger that triggers the Visual Studio debugger to launch a window and asks which Visual Studio instance to use. All you need to do is: Call AttachDebugger in your OnCmd method Load the add-in either by adding it through New Add-in... or Debug Add-ins Trigger the add-in to execute by invoking of the hook you are watching or invoking a command. The add-in will prompt the debug dialog. Click OK to start debugging..."
  },
  "docs/dependencyinjection.html": {
    "href": "docs/dependencyinjection.html",
    "title": "Dependency Injection | SOLIDWORKS PDM SDK",
    "keywords": "Dependency Injection PDMSDK provides some support for dependency injection (DI). The Container property in the AddInBase allows to resolve your types into instances. We use Simple Injector. Type registration Override the method OnRegisterAdditionalTypes. Example: C Sharp VB protected override void OnRegisterAdditionalTypes(Container container) { base.OnRegisterAdditionalTypes(container); container.Register<ISOLIDWORKSInstanceManager, SOLIDWORKSInstanceManager>(); container.RegisterSingleton<IEvaluationService, EvaluationService>(); container.RegisterSingleton <ISettingsManager,SettingsManager>(); } Protected Overrides Sub OnRegisterAdditionalTypes(container As Container) MyBase.OnRegisterAdditionalTypes(container) container.Register(Of ISOLIDWORKSInstanceManager, SOLIDWORKSInstanceManager)() container.RegisterSingleton(Of IEvaluationService, EvaluationService)() container.RegisterSingleton(Of ISettingsManager, SettingsManager)() End Sub You can call the Container property anywhere else in your AddInBase implementation and resolve a registered type to get an instance. Example: C Sharp VB var settingsManager = Container.GetInstance<ISettingsManager>(); Dim settingsManager As ISettingsManager = Container.GetInstance(Of ISettingsManager)()"
  },
  "docs/flags.html": {
    "href": "docs/flags.html",
    "title": "Task flags | SOLIDWORKS PDM SDK",
    "keywords": "Task flags A task can be: Executed from a workflow transition as an action or a change command. Scheduled to execute via a command. The task is invoked in File Explorer through the file's context menu. Initialized from the Administration tool. A task can also contain a details page. The details page is accessible from the task list window. All of these features are controlled by the EdmTaskFlag enum. With PDMSDK, you can use the TaskFlags attribute to configure your add-in like below: C Sharp VB [TaskFlags((int)EdmTaskFlag.EdmTask_SupportsChangeState + (int)EdmTaskFlag.EdmTask_SupportsDetails + (int)EdmTaskFlag.EdmTask_SupportsInitExec +(int)EdmTaskFlag.EdmTask_SupportsScheduling)] [IsTask(true)] [RequiredVersion(10, 0)] [ComVisible(true)] [Guid(\"00000-00-4745-97F6-2029AFB70716\")] public partial class AddIn : AddInBase { public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) {} } Imports System.Runtime.InteropServices <TaskFlags(CInt(EdmTaskFlag.EdmTask_SupportsChangeState) + CInt(EdmTaskFlag.EdmTask_SupportsDetails) + CInt(EdmTaskFlag.EdmTask_SupportsInitExec) + CInt(EdmTaskFlag.EdmTask_SupportsScheduling))> <IsTask(True)> <RequiredVersion(10, 0)> <ComVisible(True)> <Guid(\"00000-00-4745-97F6-2029AFB70716\")> Public Partial Class AddIn Inherits AddInBase Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) End Sub End Class"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | SOLIDWORKS PDM SDK",
    "keywords": "Getting Started Developing SOLIDWORKS PDM add-ins can be a dauting process and doing it efficiently is even more difficult endaveor. Following this guide is the easiest way to start writing SOLIDWORKS PDM add-ins with PDMSDK. Requirements You will need the following requestes to start writing code: Windows 7 or newer. SOLIDWORKS PDM client 2011 with a local view. A PDM user account with the right permissions. See below. Visual Studio. Elevated Windows admin privilges to run Visual Studio as an admin. Access to the command prompt to run some basic Windows commands. PDM Permissions Your PDM user have the following permissions: Be able to edit add-ins Workflow, file and folder permissions"
  },
  "docs/logger.html": {
    "href": "docs/logger.html",
    "title": "Logger | SOLIDWORKS PDM SDK",
    "keywords": "Logger PDMSDK has a logger property that implements the ILogger interface called Logger. It allows for logging capabilites in your add-in. There are three built-in types of logger: File logger: This logs output to a text file. You must define the output location. SQL logger: This logs output to a table in a database. This logger requires a connection string and a table name. Console logger: If your add-in dll is called from a console application, you can use this logger to print output directly to the console. This logger does not require any initialization and is very useful in unit and integration tests. Important When working with the TaskDetails hook, some developers prefer to save the output of their logs in the task instance object. To access the log, the user needs to be have the proper task permissions. We highly recommend you use the Logger and save your logs to the vault file system instead. Configuration You can define the type of the logger by overriding the method OnLoggerTypeChosen and setting the logger type. C Sharp VB protected override void OnLoggerTypeChosen(LoggerType_e defaultType) { base.OnLoggerTypeChosen(LoggerType_e.File); } To be provided. // if you see this, please contribute to our repo by providing a translation of C# to VB.NET Note You can implement your own logger by implementing the ILogger interface and register it using the Container in the RegisterAdditionalTypes method. In this case, you can ignore the OnLoggerTypeChosen method. File Logger To use the file logger: Set the output location via the OutputLocation property. Call LogToOutput to log to output. Your target must be the name of your log file with its extension. SQL logger With the SQL logger, you must: Call the Init method in the implementation of the OnCmd method. Call StartConnection to start your connection with your SQL server. Call LogToOutput to log to output with target being the name of the table in your SQL table. Call EndConnection to end your connection with your SQL server."
  },
  "docs/taskadd-ins.html": {
    "href": "docs/taskadd-ins.html",
    "title": "Definition | SOLIDWORKS PDM SDK",
    "keywords": "Definition Task add-ins are the network distributed version PDM add-ins. You can create instances of the add-in called tasks and execute them on a specific computer in your PDM network. Programmtivally, The main difference is that a task add-in observes 5 different hooks which are: EdmTaskSetup EdmTaskSetupButton EdmTaskLaunch EdmTaskRun EdmTaskDetails Note Every task add-in is a PDM add-in but not every add-in is a PDM task add-in. Creating a task add-in Conventially, you need your command manager IEdmCmdMgr5 to add the hooks above in the implemention of your GetAddInInfo. This is how it is code using the code from the task sample from the SOLIDWORKS PDM Professional API help page. Public Sub GetAddInInfo(ByRef poInfo As EdmAddInInfo, ByVal poVault As IEdmVault5, ByVal poCmdMgr As IEdmCmdMgr5) Implements IEdmAddIn5.GetAddInInfo On Error GoTo ErrHand ' Fill in the add-in's description poInfo.mbsAddInName = \"Task Test Add-in\" poInfo.mbsCompany = \"SOLIDWORKS\" poInfo.mbsDescription = \"Add-in used to test the task execution system\" poInfo.mlAddInVersion = 1 ' Minimum SOLIDWORKS PDM Professional version needed for VB.NET add-ins is 2010 poInfo.mlRequiredVersionMajor = 10 poInfo.mlRequiredVersionMinor = 0 'Register this add-in as a task add-in poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskRun) 'Register this add-in as being able to append its own property pages in the Administration tool poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskSetup) 'Register this add-in to be called when the task is launched on the client computer poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskLaunch) 'Register this add-in to provide extra details in the Details dialog box in the task list in the Administration tool poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskDetails) 'Register this add-in to be called when the launch dialog box is closed poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskLaunchButton) 'Register this add-in to be called when the set-up wizard is closed poCmdMgr.AddHook(EdmCmdType.EdmCmd_TaskSetupButton) Exit Sub ErrHand: Dim v11 As IEdmVault11 v11 = poVault MsgBox(v11.GetErrorMessage(Err.Number)) End Sub Using PDMSDK The class that implements the AddInBase needs to be decorated with IsTask attribute. Note This attribute is already defined for you if you have used the PDM SDK Template to create your add-in project. C Sharp VB [IsTask(true)] [RequiredVersion(10, 0)] [ComVisible(true)] [Guid(\"00000-00-4745-97F6-2029AFB70716\")] public partial class AddIn : AddInBase { public override void OnCmd(ref EdmCmd poCmd, ref EdmCmdData[] ppoData) {} } Imports System.Runtime.InteropServices <IsTask(True)> <RequiredVersion(10, 0)> <ComVisible(True)> <Guid(\"00000-00-4745-97F6-2029AFB70716\")> Public Partial Class AddIn Inherits AddInBase Public Overrides Sub OnCmd(ByRef poCmd As EdmCmd, ByRef ppoData() As EdmCmdData) ' Implement the method logic here End Sub End Class Warning Do not delete this attribute otherwise you will get an error dialog box when you add the add-in files in the vault. This attribute is required."
  },
  "docs/updating_nuget_packages.html": {
    "href": "docs/updating_nuget_packages.html",
    "title": "Using the Package Manager Console | SOLIDWORKS PDM SDK",
    "keywords": "To fully utilize the latest features and bug fixes of the SDK, please make sure you are using the latest version of the BlueByte.PDMProfessional.SDK nuget package. Note BlueByte.PDMProfessional.SDK targets .NET framework 4.6.1. For more information, check out the nuget package page. The latest version of the nuget is: Using the Package Manager Console In Visual Studio: Press Ctrl + Q. This is going to highlight the search box at the top of the window. Type Nuget Package Manager Console and pick the first search result. A new window will appear. Allow a couple of seconds for the package manager to initialize. Type in the following command (and press enter): Update-Package BlueByte.SOLIDWORKS.PDMProfessional.SDK The command above will install the package in the active project. If you have multiple projects and you need to specify the one that needs to update the SDK nuget pacakge, use the -project argument to specify the project name. Example: Update-Package BlueByte.SOLIDWORKS.PDMProfessional.SDK -project MyAddInProject The Package Manager Console will report back that package has been installed successfully. Using the Package Manager In Visual Studio, Locate the add-in's project in the Solution Explorer Right-click on the project and click Manage Nuget Packages... The Package Manager window will open. Locate and select the BlueByte.SOLIDWORKS.PDMProfessional.SDK nuget package in the installed tab. Depending on the version of the SDK template, you may be to update the package if there is a new version. If an update is available, select the nuget package. The properties of the package will update on the right-side of the window and you are able to pick the latest available version from the version dropdown."
  },
  "index.html": {
    "href": "index.html",
    "title": "SOLIDWORKS PDM SDK | SOLIDWORKS PDM SDK",
    "keywords": "SOLIDWORKS PDM SDK Introduction Thank you for choosing the Blue Byte Systems Inc. The SOLIDWORKS PDM SDK is the only available open source PDM SDK for SOLIDWORKS PDM to develop add-ins and PDM task add-ins. The SOLIDWORKS PDM Professional Application Programming Interface (API) is an OLE programming interface to SOLIDWORKS PDM Professional. PDMSDK is the only SOLIDWORKS PDM SDK that builds on top of the PDM API. Tip You can use VB.NET or C# to write add-ins with our Visual Studio template. See guide for more information. Tip If you are a new user, we highly recommed you start with our guide after reading our. See here. The API documentation of SDK is found here. Terms The SOLIDWORKS PDM SDK is a product of Blue Byte Systems Inc. It is not supported or endorsed by SOLIDWORKS Corporation. To request support, please reach out to us via our issues page at our GitHub. License Please review our licensing terms before using PDMSDK. This includes our PDMSDK nuget package and our Visual Studio Visual Studio templates."
  }
}