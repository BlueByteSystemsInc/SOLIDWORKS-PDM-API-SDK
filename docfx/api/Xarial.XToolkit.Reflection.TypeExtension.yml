### YamlMime:ManagedReference
items:
- uid: Xarial.XToolkit.Reflection.TypeExtension
  commentId: T:Xarial.XToolkit.Reflection.TypeExtension
  id: TypeExtension
  parent: Xarial.XToolkit.Reflection
  children:
  - Xarial.XToolkit.Reflection.TypeExtension.FindMethod(System.Type,System.String,System.Reflection.BindingFlags)
  - Xarial.XToolkit.Reflection.TypeExtension.GetArgumentsOfGenericType(System.Type,System.Type)
  - Xarial.XToolkit.Reflection.TypeExtension.GetEnumFlags(System.Type)
  - Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)
  - Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod(System.Object,System.Reflection.MethodInfo,System.Object[])
  - Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  - Xarial.XToolkit.Reflection.TypeExtension.IsAssignableToGenericType(System.Type,System.Type)
  - Xarial.XToolkit.Reflection.TypeExtension.TryFindGenericType(System.Type,System.Type)
  - Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute``1(System.Type,``0@,System.Boolean)
  langs:
  - csharp
  - vb
  name: TypeExtension
  nameWithType: TypeExtension
  fullName: Xarial.XToolkit.Reflection.TypeExtension
  type: Class
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: TypeExtension
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 15
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  syntax:
    content: public static class TypeExtension
    content.vb: Public Module TypeExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod(System.Object,System.Reflection.MethodInfo,System.Object[])
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod(System.Object,System.Reflection.MethodInfo,System.Object[])
  id: InvokeMethod(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: InvokeMethod(object, MethodInfo, params object[])
  nameWithType: TypeExtension.InvokeMethod(object, MethodInfo, params object[])
  fullName: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod(object, System.Reflection.MethodInfo, params object[])
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: InvokeMethod
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 40
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  syntax:
    content: public static void InvokeMethod(object obj, MethodInfo method, params object[] args)
    parameters:
    - id: obj
      type: System.Object
    - id: method
      type: System.Reflection.MethodInfo
    - id: args
      type: System.Object[]
    content.vb: Public Shared Sub InvokeMethod(obj As Object, method As MethodInfo, ParamArray args As Object())
  overload: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod*
  nameWithType.vb: TypeExtension.InvokeMethod(Object, MethodInfo, ParamArray Object())
  fullName.vb: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod(Object, System.Reflection.MethodInfo, ParamArray Object())
  name.vb: InvokeMethod(Object, MethodInfo, ParamArray Object())
- uid: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  id: InvokeMethod``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: InvokeMethod<TRes>(object, MethodInfo, params object[])
  nameWithType: TypeExtension.InvokeMethod<TRes>(object, MethodInfo, params object[])
  fullName: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod<TRes>(object, System.Reflection.MethodInfo, params object[])
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: InvokeMethod
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 43
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  syntax:
    content: public static TRes InvokeMethod<TRes>(object obj, MethodInfo method, params object[] args)
    parameters:
    - id: obj
      type: System.Object
    - id: method
      type: System.Reflection.MethodInfo
    - id: args
      type: System.Object[]
    typeParameters:
    - id: TRes
    return:
      type: '{TRes}'
    content.vb: Public Shared Function InvokeMethod(Of TRes)(obj As Object, method As MethodInfo, ParamArray args As Object()) As TRes
  overload: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod*
  nameWithType.vb: TypeExtension.InvokeMethod(Of TRes)(Object, MethodInfo, ParamArray Object())
  fullName.vb: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod(Of TRes)(Object, System.Reflection.MethodInfo, ParamArray Object())
  name.vb: InvokeMethod(Of TRes)(Object, MethodInfo, ParamArray Object())
- uid: Xarial.XToolkit.Reflection.TypeExtension.FindMethod(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.FindMethod(System.Type,System.String,System.Reflection.BindingFlags)
  id: FindMethod(System.Type,System.String,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: FindMethod(Type, string, BindingFlags)
  nameWithType: TypeExtension.FindMethod(Type, string, BindingFlags)
  fullName: Xarial.XToolkit.Reflection.TypeExtension.FindMethod(System.Type, string, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: FindMethod
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 73
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  syntax:
    content: public static MethodInfo FindMethod(this Type type, string methodName, BindingFlags flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
    parameters:
    - id: type
      type: System.Type
    - id: methodName
      type: System.String
    - id: flags
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public Shared Function FindMethod(type As Type, methodName As String, flags As BindingFlags = BindingFlags.Instance Or BindingFlags.Public Or BindingFlags.NonPublic) As MethodInfo
  overload: Xarial.XToolkit.Reflection.TypeExtension.FindMethod*
  nameWithType.vb: TypeExtension.FindMethod(Type, String, BindingFlags)
  fullName.vb: Xarial.XToolkit.Reflection.TypeExtension.FindMethod(System.Type, String, System.Reflection.BindingFlags)
  name.vb: FindMethod(Type, String, BindingFlags)
- uid: Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute``1(System.Type,``0@,System.Boolean)
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute``1(System.Type,``0@,System.Boolean)
  id: TryGetAttribute``1(System.Type,``0@,System.Boolean)
  isExtensionMethod: true
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: TryGetAttribute<TAtt>(Type, out TAtt, bool)
  nameWithType: TypeExtension.TryGetAttribute<TAtt>(Type, out TAtt, bool)
  fullName: Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute<TAtt>(System.Type, out TAtt, bool)
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: TryGetAttribute
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 94
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  syntax:
    content: 'public static bool TryGetAttribute<TAtt>(this Type type, out TAtt att, bool searchInParentTypes = false) where TAtt : Attribute'
    parameters:
    - id: type
      type: System.Type
    - id: att
      type: '{TAtt}'
    - id: searchInParentTypes
      type: System.Boolean
    typeParameters:
    - id: TAtt
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryGetAttribute(Of TAtt As Attribute)(type As Type, att As TAtt, searchInParentTypes As Boolean = False) As Boolean
  overload: Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute*
  nameWithType.vb: TypeExtension.TryGetAttribute(Of TAtt)(Type, TAtt, Boolean)
  fullName.vb: Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute(Of TAtt)(System.Type, TAtt, Boolean)
  name.vb: TryGetAttribute(Of TAtt)(Type, TAtt, Boolean)
- uid: Xarial.XToolkit.Reflection.TypeExtension.IsAssignableToGenericType(System.Type,System.Type)
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.IsAssignableToGenericType(System.Type,System.Type)
  id: IsAssignableToGenericType(System.Type,System.Type)
  isExtensionMethod: true
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: IsAssignableToGenericType(Type, Type)
  nameWithType: TypeExtension.IsAssignableToGenericType(Type, Type)
  fullName: Xarial.XToolkit.Reflection.TypeExtension.IsAssignableToGenericType(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: IsAssignableToGenericType
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 146
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  summary: Checks if this type can be assigned to the generic type
  example: []
  syntax:
    content: public static bool IsAssignableToGenericType(this Type thisType, Type genericType)
    parameters:
    - id: thisType
      type: System.Type
      description: This type
    - id: genericType
      type: System.Type
      description: Generic type
    return:
      type: System.Boolean
      description: True if this type can be assigned to generic type
    content.vb: Public Shared Function IsAssignableToGenericType(thisType As Type, genericType As Type) As Boolean
  overload: Xarial.XToolkit.Reflection.TypeExtension.IsAssignableToGenericType*
- uid: Xarial.XToolkit.Reflection.TypeExtension.GetArgumentsOfGenericType(System.Type,System.Type)
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.GetArgumentsOfGenericType(System.Type,System.Type)
  id: GetArgumentsOfGenericType(System.Type,System.Type)
  isExtensionMethod: true
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: GetArgumentsOfGenericType(Type, Type)
  nameWithType: TypeExtension.GetArgumentsOfGenericType(Type, Type)
  fullName: Xarial.XToolkit.Reflection.TypeExtension.GetArgumentsOfGenericType(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: GetArgumentsOfGenericType
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 149
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  syntax:
    content: public static Type[] GetArgumentsOfGenericType(this Type thisType, Type genericType)
    parameters:
    - id: thisType
      type: System.Type
    - id: genericType
      type: System.Type
    return:
      type: System.Type[]
    content.vb: Public Shared Function GetArgumentsOfGenericType(thisType As Type, genericType As Type) As Type()
  overload: Xarial.XToolkit.Reflection.TypeExtension.GetArgumentsOfGenericType*
- uid: Xarial.XToolkit.Reflection.TypeExtension.TryFindGenericType(System.Type,System.Type)
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.TryFindGenericType(System.Type,System.Type)
  id: TryFindGenericType(System.Type,System.Type)
  isExtensionMethod: true
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: TryFindGenericType(Type, Type)
  nameWithType: TypeExtension.TryFindGenericType(Type, Type)
  fullName: Xarial.XToolkit.Reflection.TypeExtension.TryFindGenericType(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: TryFindGenericType
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 163
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  syntax:
    content: public static Type TryFindGenericType(this Type thisType, Type genericType)
    parameters:
    - id: thisType
      type: System.Type
    - id: genericType
      type: System.Type
    return:
      type: System.Type
    content.vb: Public Shared Function TryFindGenericType(thisType As Type, genericType As Type) As Type
  overload: Xarial.XToolkit.Reflection.TypeExtension.TryFindGenericType*
- uid: Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)
  id: GetMethodWithGenericParameters(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: GetMethodWithGenericParameters(Type, string, Type[], BindingFlags)
  nameWithType: TypeExtension.GetMethodWithGenericParameters(Type, string, Type[], BindingFlags)
  fullName: Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters(System.Type, string, System.Type[], System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: GetMethodWithGenericParameters
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 201
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  summary: Finds the method from the type if
  remarks: This method is similar to <xref href="System.Type.GetMethod(System.String)" data-throw-if-not-resolved="false"></xref>, but allowing to specify the generic types definitions
  example: []
  syntax:
    content: public static MethodInfo GetMethodWithGenericParameters(this Type type, string name, Type[] paramTypes, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public)
    parameters:
    - id: type
      type: System.Type
      description: Type to get method from
    - id: name
      type: System.String
      description: Name of the method
    - id: paramTypes
      type: System.Type[]
      description: Parameter types of the method
    - id: bindingFlags
      type: System.Reflection.BindingFlags
      description: Binding flags
    return:
      type: System.Reflection.MethodInfo
      description: Method or null if not found
    content.vb: Public Shared Function GetMethodWithGenericParameters(type As Type, name As String, paramTypes As Type(), bindingFlags As BindingFlags = BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public) As MethodInfo
  overload: Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters*
  nameWithType.vb: TypeExtension.GetMethodWithGenericParameters(Type, String, Type(), BindingFlags)
  fullName.vb: Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters(System.Type, String, System.Type(), System.Reflection.BindingFlags)
  name.vb: GetMethodWithGenericParameters(Type, String, Type(), BindingFlags)
- uid: Xarial.XToolkit.Reflection.TypeExtension.GetEnumFlags(System.Type)
  commentId: M:Xarial.XToolkit.Reflection.TypeExtension.GetEnumFlags(System.Type)
  id: GetEnumFlags(System.Type)
  isExtensionMethod: true
  parent: Xarial.XToolkit.Reflection.TypeExtension
  langs:
  - csharp
  - vb
  name: GetEnumFlags(Type)
  nameWithType: TypeExtension.GetEnumFlags(Type)
  fullName: Xarial.XToolkit.Reflection.TypeExtension.GetEnumFlags(System.Type)
  type: Method
  source:
    remote:
      path: src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
      branch: master
      repo: https://github.com/BlueByteSystemsInc/PDMFramework.git
    id: GetEnumFlags
    path: ../src/BlueByte.SOLIDWORKS.PDMProfessional.SDK/AssemblyResolution/Reflection/TypeExtension.cs
    startLine: 241
  assemblies:
  - BlueByte.SOLIDWORKS.PDMProfessional.SDK
  namespace: Xarial.XToolkit.Reflection
  syntax:
    content: public static Enum[] GetEnumFlags(this Type enumType)
    parameters:
    - id: enumType
      type: System.Type
    return:
      type: System.Enum[]
    content.vb: Public Shared Function GetEnumFlags(enumType As Type) As [Enum]()
  overload: Xarial.XToolkit.Reflection.TypeExtension.GetEnumFlags*
references:
- uid: Xarial.XToolkit.Reflection
  commentId: N:Xarial.XToolkit.Reflection
  href: Xarial.html
  name: Xarial.XToolkit.Reflection
  nameWithType: Xarial.XToolkit.Reflection
  fullName: Xarial.XToolkit.Reflection
  spec.csharp:
  - uid: Xarial
    name: Xarial
    href: Xarial.html
  - name: .
  - uid: Xarial.XToolkit
    name: XToolkit
    href: Xarial.XToolkit.html
  - name: .
  - uid: Xarial.XToolkit.Reflection
    name: Reflection
    href: Xarial.XToolkit.Reflection.html
  spec.vb:
  - uid: Xarial
    name: Xarial
    href: Xarial.html
  - name: .
  - uid: Xarial.XToolkit
    name: XToolkit
    href: Xarial.XToolkit.html
  - name: .
  - uid: Xarial.XToolkit.Reflection
    name: Reflection
    href: Xarial.XToolkit.Reflection.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod*
  commentId: Overload:Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod
  href: Xarial.XToolkit.Reflection.TypeExtension.html#Xarial_XToolkit_Reflection_TypeExtension_InvokeMethod_System_Object_System_Reflection_MethodInfo_System_Object___
  name: InvokeMethod
  nameWithType: TypeExtension.InvokeMethod
  fullName: Xarial.XToolkit.Reflection.TypeExtension.InvokeMethod
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.reflection.methodinfo
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection
- uid: '{TRes}'
  commentId: '!:TRes'
  definition: TRes
  name: TRes
  nameWithType: TRes
  fullName: TRes
- uid: TRes
  commentId: '!:TRes'
  name: TRes
  nameWithType: TRes
  fullName: TRes
- uid: Xarial.XToolkit.Reflection.TypeExtension.FindMethod*
  commentId: Overload:Xarial.XToolkit.Reflection.TypeExtension.FindMethod
  href: Xarial.XToolkit.Reflection.TypeExtension.html#Xarial_XToolkit_Reflection_TypeExtension_FindMethod_System_Type_System_String_System_Reflection_BindingFlags_
  name: FindMethod
  nameWithType: TypeExtension.FindMethod
  fullName: Xarial.XToolkit.Reflection.TypeExtension.FindMethod
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute*
  commentId: Overload:Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute
  href: Xarial.XToolkit.Reflection.TypeExtension.html#Xarial_XToolkit_Reflection_TypeExtension_TryGetAttribute__1_System_Type___0__System_Boolean_
  name: TryGetAttribute
  nameWithType: TypeExtension.TryGetAttribute
  fullName: Xarial.XToolkit.Reflection.TypeExtension.TryGetAttribute
- uid: '{TAtt}'
  commentId: '!:TAtt'
  definition: TAtt
  name: TAtt
  nameWithType: TAtt
  fullName: TAtt
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TAtt
  name: TAtt
  nameWithType: TAtt
  fullName: TAtt
- uid: Xarial.XToolkit.Reflection.TypeExtension.IsAssignableToGenericType*
  commentId: Overload:Xarial.XToolkit.Reflection.TypeExtension.IsAssignableToGenericType
  href: Xarial.XToolkit.Reflection.TypeExtension.html#Xarial_XToolkit_Reflection_TypeExtension_IsAssignableToGenericType_System_Type_System_Type_
  name: IsAssignableToGenericType
  nameWithType: TypeExtension.IsAssignableToGenericType
  fullName: Xarial.XToolkit.Reflection.TypeExtension.IsAssignableToGenericType
- uid: Xarial.XToolkit.Reflection.TypeExtension.GetArgumentsOfGenericType*
  commentId: Overload:Xarial.XToolkit.Reflection.TypeExtension.GetArgumentsOfGenericType
  href: Xarial.XToolkit.Reflection.TypeExtension.html#Xarial_XToolkit_Reflection_TypeExtension_GetArgumentsOfGenericType_System_Type_System_Type_
  name: GetArgumentsOfGenericType
  nameWithType: TypeExtension.GetArgumentsOfGenericType
  fullName: Xarial.XToolkit.Reflection.TypeExtension.GetArgumentsOfGenericType
- uid: System.Type[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: (
  - name: )
- uid: Xarial.XToolkit.Reflection.TypeExtension.TryFindGenericType*
  commentId: Overload:Xarial.XToolkit.Reflection.TypeExtension.TryFindGenericType
  href: Xarial.XToolkit.Reflection.TypeExtension.html#Xarial_XToolkit_Reflection_TypeExtension_TryFindGenericType_System_Type_System_Type_
  name: TryFindGenericType
  nameWithType: TypeExtension.TryFindGenericType
  fullName: Xarial.XToolkit.Reflection.TypeExtension.TryFindGenericType
- uid: System.Type.GetMethod(System.String)
  commentId: M:System.Type.GetMethod(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type.getmethod#system-type-getmethod(system-string)
  name: GetMethod(string)
  nameWithType: Type.GetMethod(string)
  fullName: System.Type.GetMethod(string)
  nameWithType.vb: Type.GetMethod(String)
  fullName.vb: System.Type.GetMethod(String)
  name.vb: GetMethod(String)
  spec.csharp:
  - uid: System.Type.GetMethod(System.String)
    name: GetMethod
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type.getmethod#system-type-getmethod(system-string)
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: System.Type.GetMethod(System.String)
    name: GetMethod
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type.getmethod#system-type-getmethod(system-string)
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters*
  commentId: Overload:Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters
  href: Xarial.XToolkit.Reflection.TypeExtension.html#Xarial_XToolkit_Reflection_TypeExtension_GetMethodWithGenericParameters_System_Type_System_String_System_Type___System_Reflection_BindingFlags_
  name: GetMethodWithGenericParameters
  nameWithType: TypeExtension.GetMethodWithGenericParameters
  fullName: Xarial.XToolkit.Reflection.TypeExtension.GetMethodWithGenericParameters
- uid: Xarial.XToolkit.Reflection.TypeExtension.GetEnumFlags*
  commentId: Overload:Xarial.XToolkit.Reflection.TypeExtension.GetEnumFlags
  href: Xarial.XToolkit.Reflection.TypeExtension.html#Xarial_XToolkit_Reflection_TypeExtension_GetEnumFlags_System_Type_
  name: GetEnumFlags
  nameWithType: TypeExtension.GetEnumFlags
  fullName: Xarial.XToolkit.Reflection.TypeExtension.GetEnumFlags
- uid: System.Enum[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.enum
  name: Enum[]
  nameWithType: Enum[]
  fullName: System.Enum[]
  nameWithType.vb: Enum()
  fullName.vb: System.Enum()
  name.vb: Enum()
  spec.csharp:
  - uid: System.Enum
    name: Enum
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.enum
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Enum
    name: Enum
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.enum
  - name: (
  - name: )
